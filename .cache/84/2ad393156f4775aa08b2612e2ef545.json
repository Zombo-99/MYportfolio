{"id":"ooWW","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.DigitalGlitch=void 0;const t=exports.DigitalGlitch={uniforms:{tDiffuse:{value:null},tDisp:{value:null},byp:{value:0},amount:{value:.08},angle:{value:.02},seed:{value:.02},seed_x:{value:.02},seed_y:{value:.02},distortion_x:{value:.5},distortion_y:{value:.6},col_s:{value:.05}},vertexShader:\"varying vec2 vUv;\\n     void main() {\\n     \\t vUv = uv;\\n     \\t gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n     }\",fragmentShader:\"uniform int byp; //should we apply the glitch ?\\n     uniform sampler2D tDiffuse;\\n     uniform sampler2D tDisp;\\n     uniform float amount;\\n     uniform float angle;\\n     uniform float seed;\\n     uniform float seed_x;\\n     uniform float seed_y;\\n     uniform float distortion_x;\\n     uniform float distortion_y;\\n     uniform float col_s;\\n\\n     varying vec2 vUv;\\n\\n     float rand(vec2 co){\\n     \\t return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n     }\\n\\n     void main() {\\n     \\tif(byp<1) {\\n     \\t\\tvec2 p = vUv;\\n     \\t\\tfloat xs = floor(gl_FragCoord.x / 0.5);\\n     \\t\\tfloat ys = floor(gl_FragCoord.y / 0.5);\\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\\n     \\t\\tvec4 normal = texture2D (tDisp, p*seed*seed);\\n     \\t\\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\\n     \\t\\t\\tif(seed_x>0.){\\n     \\t\\t\\t\\tp.y = 1. - (p.y + distortion_y);\\n     \\t\\t\\t}\\n     \\t\\t\\telse {\\n     \\t\\t\\t\\tp.y = distortion_y;\\n     \\t\\t\\t}\\n     \\t\\t}\\n     \\t\\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\\n     \\t\\t\\tif(seed_y>0.){\\n     \\t\\t\\t\\tp.x=distortion_x;\\n     \\t\\t\\t}\\n     \\t\\t\\telse {\\n     \\t\\t\\t\\tp.x = 1. - (p.x + distortion_x);\\n     \\t\\t\\t}\\n     \\t\\t}\\n     \\t\\tp.x+=normal.x*seed_x*(seed/5.);\\n     \\t\\tp.y+=normal.y*seed_y*(seed/5.);\\n    //base from RGB shift shader\\n     \\t\\tvec2 offset = amount * vec2( cos(angle), sin(angle));\\n     \\t\\tvec4 cr = texture2D(tDiffuse, p + offset);\\n     \\t\\tvec4 cga = texture2D(tDiffuse, p);\\n     \\t\\tvec4 cb = texture2D(tDiffuse, p - offset);\\n     \\t\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n    //add noise\\n     \\t\\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\\n     \\t\\tgl_FragColor = gl_FragColor+ snow;\\n     \\t}\\n     \\telse {\\n     \\t\\tgl_FragColor=texture2D (tDiffuse, vUv);\\n     \\t}\\n    }\"};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":104,"column":1},"generated":{"line":1,"column":95}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":1,"column":0},"generated":{"line":1,"column":97}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"DigitalGlitch","original":{"line":1,"column":6},"generated":{"line":1,"column":103}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"exports","original":{"line":1,"column":19},"generated":{"line":1,"column":105}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"DigitalGlitch","original":{"line":1,"column":19},"generated":{"line":1,"column":113}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":1,"column":22},"generated":{"line":1,"column":127}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"uniforms","original":{"line":2,"column":2},"generated":{"line":1,"column":128}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":2,"column":12},"generated":{"line":1,"column":137}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"tDiffuse","original":{"line":3,"column":4},"generated":{"line":1,"column":138}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":3,"column":14},"generated":{"line":1,"column":147}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":4,"column":6},"generated":{"line":1,"column":148}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":4,"column":13},"generated":{"line":1,"column":154}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"tDisp","original":{"line":7,"column":4},"generated":{"line":1,"column":160}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":7,"column":11},"generated":{"line":1,"column":166}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":8,"column":6},"generated":{"line":1,"column":167}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":8,"column":13},"generated":{"line":1,"column":173}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"byp","original":{"line":11,"column":4},"generated":{"line":1,"column":179}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":11,"column":9},"generated":{"line":1,"column":183}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":12,"column":6},"generated":{"line":1,"column":184}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":12,"column":13},"generated":{"line":1,"column":190}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"amount","original":{"line":15,"column":4},"generated":{"line":1,"column":193}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":15,"column":12},"generated":{"line":1,"column":200}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":16,"column":6},"generated":{"line":1,"column":201}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":16,"column":13},"generated":{"line":1,"column":207}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"angle","original":{"line":18,"column":4},"generated":{"line":1,"column":212}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":18,"column":11},"generated":{"line":1,"column":218}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":19,"column":6},"generated":{"line":1,"column":219}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":19,"column":13},"generated":{"line":1,"column":225}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"seed","original":{"line":21,"column":4},"generated":{"line":1,"column":230}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":21,"column":10},"generated":{"line":1,"column":235}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":22,"column":6},"generated":{"line":1,"column":236}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":22,"column":13},"generated":{"line":1,"column":242}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"seed_x","original":{"line":24,"column":4},"generated":{"line":1,"column":247}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":24,"column":12},"generated":{"line":1,"column":254}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":25,"column":6},"generated":{"line":1,"column":255}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":25,"column":13},"generated":{"line":1,"column":261}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"seed_y","original":{"line":28,"column":4},"generated":{"line":1,"column":266}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":28,"column":12},"generated":{"line":1,"column":273}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":29,"column":6},"generated":{"line":1,"column":274}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":29,"column":13},"generated":{"line":1,"column":280}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"distortion_x","original":{"line":32,"column":4},"generated":{"line":1,"column":285}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":32,"column":18},"generated":{"line":1,"column":298}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":33,"column":6},"generated":{"line":1,"column":299}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":33,"column":13},"generated":{"line":1,"column":305}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"distortion_y","original":{"line":35,"column":4},"generated":{"line":1,"column":309}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":35,"column":18},"generated":{"line":1,"column":322}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":36,"column":6},"generated":{"line":1,"column":323}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":36,"column":13},"generated":{"line":1,"column":329}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"col_s","original":{"line":38,"column":4},"generated":{"line":1,"column":333}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":38,"column":11},"generated":{"line":1,"column":339}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"value","original":{"line":39,"column":6},"generated":{"line":1,"column":340}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":39,"column":13},"generated":{"line":1,"column":346}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"vertexShader","original":{"line":42,"column":2},"generated":{"line":1,"column":352}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":42,"column":16},"generated":{"line":1,"column":365}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","name":"fragmentShader","original":{"line":47,"column":2},"generated":{"line":1,"column":515}},{"source":"node_modules/three-stdlib/shaders/DigitalGlitch.js","original":{"line":47,"column":18},"generated":{"line":1,"column":530}}],"sources":{"node_modules/three-stdlib/shaders/DigitalGlitch.js":"const DigitalGlitch = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    //diffuse texture\n    tDisp: {\n      value: null\n    },\n    //displacement texture for digital glitch squares\n    byp: {\n      value: 0\n    },\n    //apply the glitch ?\n    amount: {\n      value: 0.08\n    },\n    angle: {\n      value: 0.02\n    },\n    seed: {\n      value: 0.02\n    },\n    seed_x: {\n      value: 0.02\n    },\n    //-1,1\n    seed_y: {\n      value: 0.02\n    },\n    //-1,1\n    distortion_x: {\n      value: 0.5\n    },\n    distortion_y: {\n      value: 0.6\n    },\n    col_s: {\n      value: 0.05\n    }\n  },\n  vertexShader: `varying vec2 vUv;\n     void main() {\n     \t vUv = uv;\n     \t gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n     }`,\n  fragmentShader: `uniform int byp; //should we apply the glitch ?\n     uniform sampler2D tDiffuse;\n     uniform sampler2D tDisp;\n     uniform float amount;\n     uniform float angle;\n     uniform float seed;\n     uniform float seed_x;\n     uniform float seed_y;\n     uniform float distortion_x;\n     uniform float distortion_y;\n     uniform float col_s;\n\n     varying vec2 vUv;\n\n     float rand(vec2 co){\n     \t return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n     }\n\n     void main() {\n     \tif(byp<1) {\n     \t\tvec2 p = vUv;\n     \t\tfloat xs = floor(gl_FragCoord.x / 0.5);\n     \t\tfloat ys = floor(gl_FragCoord.y / 0.5);\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n     \t\tvec4 normal = texture2D (tDisp, p*seed*seed);\n     \t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n     \t\t\tif(seed_x>0.){\n     \t\t\t\tp.y = 1. - (p.y + distortion_y);\n     \t\t\t}\n     \t\t\telse {\n     \t\t\t\tp.y = distortion_y;\n     \t\t\t}\n     \t\t}\n     \t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n     \t\t\tif(seed_y>0.){\n     \t\t\t\tp.x=distortion_x;\n     \t\t\t}\n     \t\t\telse {\n     \t\t\t\tp.x = 1. - (p.x + distortion_x);\n     \t\t\t}\n     \t\t}\n     \t\tp.x+=normal.x*seed_x*(seed/5.);\n     \t\tp.y+=normal.y*seed_y*(seed/5.);\n    //base from RGB shift shader\n     \t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n     \t\tvec4 cr = texture2D(tDiffuse, p + offset);\n     \t\tvec4 cga = texture2D(tDiffuse, p);\n     \t\tvec4 cb = texture2D(tDiffuse, p - offset);\n     \t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n    //add noise\n     \t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\n     \t\tgl_FragColor = gl_FragColor+ snow;\n     \t}\n     \telse {\n     \t\tgl_FragColor=texture2D (tDiffuse, vUv);\n     \t}\n    }`\n};\n\nexport { DigitalGlitch };\n"},"lineCount":null}},"error":null,"hash":"fae489e1b767d23dd66b711a3b6232a1","cacheData":{"env":{}}}