{"id":"wF5u","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988},{"name":"three","loc":{"line":1,"column":24,"index":24},"parent":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/shaders/FreiChenShader.js","resolved":"/home/moh/Desktop/MYPortfolio/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.FreiChenShader=void 0;var t=require(\"three\");const e=exports.FreiChenShader={uniforms:{tDiffuse:{value:null},aspect:{value:new t.Vector2(512,512)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"\\tvUv = uv;\",\"\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform vec2 aspect;\",\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\"mat3 G[9];\",\"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\",\"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\",\"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\",\"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\",\"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\",\"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\",\"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\",\"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\",\"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\",\"void main(void)\",\"{\",\"\\tG[0] = g0,\",\"\\tG[1] = g1,\",\"\\tG[2] = g2,\",\"\\tG[3] = g3,\",\"\\tG[4] = g4,\",\"\\tG[5] = g5,\",\"\\tG[6] = g6,\",\"\\tG[7] = g7,\",\"\\tG[8] = g8;\",\"\\tmat3 I;\",\"\\tfloat cnv[9];\",\"\\tvec3 sample;\",\"\\tfor (float i=0.0; i<3.0; i++) {\",\"\\t\\tfor (float j=0.0; j<3.0; j++) {\",\"\\t\\t\\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\"\\t\\t\\tI[int(i)][int(j)] = length(sample);\",\"\\t\\t}\",\"\\t}\",\"\\tfor (int i=0; i<9; i++) {\",\"\\t\\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\"\\t\\tcnv[i] = dp3 * dp3;\",\"\\t}\",\"\\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\",\"\\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\",\"\\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\",\"}\"].join(\"\\n\")};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":26,"column":1},"generated":{"line":1,"column":96}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":98}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"_three","original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"require","original":{"line":1,"column":0},"generated":{"line":1,"column":104}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":112}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":10,"column":0},"generated":{"line":1,"column":121}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"FreiChenShader","original":{"line":10,"column":6},"generated":{"line":1,"column":127}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"exports","original":{"line":10,"column":20},"generated":{"line":1,"column":129}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"FreiChenShader","original":{"line":10,"column":20},"generated":{"line":1,"column":137}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":10,"column":23},"generated":{"line":1,"column":152}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"uniforms","original":{"line":11,"column":2},"generated":{"line":1,"column":153}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":11,"column":12},"generated":{"line":1,"column":162}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"tDiffuse","original":{"line":12,"column":4},"generated":{"line":1,"column":163}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":12,"column":14},"generated":{"line":1,"column":172}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"value","original":{"line":13,"column":6},"generated":{"line":1,"column":173}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":13,"column":13},"generated":{"line":1,"column":179}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"aspect","original":{"line":15,"column":4},"generated":{"line":1,"column":185}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":15,"column":12},"generated":{"line":1,"column":192}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"value","original":{"line":16,"column":6},"generated":{"line":1,"column":193}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":16,"column":13},"generated":{"line":1,"column":199}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"Vector2","original":{"line":16,"column":17},"generated":{"line":1,"column":203}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":16,"column":24},"generated":{"line":1,"column":205}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":16,"column":25},"generated":{"line":1,"column":213}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":16,"column":30},"generated":{"line":1,"column":217}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"vertexShader","original":{"line":19,"column":2},"generated":{"line":1,"column":224}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":16},"generated":{"line":1,"column":237}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":17},"generated":{"line":1,"column":238}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":38},"generated":{"line":1,"column":258}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":55},"generated":{"line":1,"column":274}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":69},"generated":{"line":1,"column":288}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":147},"generated":{"line":1,"column":366}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"join","original":{"line":19,"column":152},"generated":{"line":1,"column":371}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":19,"column":157},"generated":{"line":1,"column":376}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"fragmentShader","original":{"line":20,"column":2},"generated":{"line":1,"column":382}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":20,"column":18},"generated":{"line":1,"column":397}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":20,"column":19},"generated":{"line":1,"column":398}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":20,"column":50},"generated":{"line":1,"column":428}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":20,"column":71},"generated":{"line":1,"column":448}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":20,"column":95},"generated":{"line":1,"column":471}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":20,"column":149},"generated":{"line":1,"column":524}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":2},"generated":{"line":1,"column":537}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":131},"generated":{"line":1,"column":665}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":260},"generated":{"line":1,"column":793}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":389},"generated":{"line":1,"column":921}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":518},"generated":{"line":1,"column":1049}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":582},"generated":{"line":1,"column":1112}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":646},"generated":{"line":1,"column":1175}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":857},"generated":{"line":1,"column":1385}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1068},"generated":{"line":1,"column":1595}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1275},"generated":{"line":1,"column":1801}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1294},"generated":{"line":1,"column":1819}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1299},"generated":{"line":1,"column":1823}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1314},"generated":{"line":1,"column":1838}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1329},"generated":{"line":1,"column":1853}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1344},"generated":{"line":1,"column":1868}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1359},"generated":{"line":1,"column":1883}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1374},"generated":{"line":1,"column":1898}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1389},"generated":{"line":1,"column":1913}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1404},"generated":{"line":1,"column":1928}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1419},"generated":{"line":1,"column":1943}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1434},"generated":{"line":1,"column":1958}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1446},"generated":{"line":1,"column":1970}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":21,"column":1464},"generated":{"line":1,"column":1988}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":23,"column":2},"generated":{"line":1,"column":2005}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":23,"column":38},"generated":{"line":1,"column":2041}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":23,"column":75},"generated":{"line":1,"column":2079}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":23,"column":149},"generated":{"line":1,"column":2155}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":23,"column":191},"generated":{"line":1,"column":2199}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":23,"column":198},"generated":{"line":1,"column":2207}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":2},"generated":{"line":1,"column":2213}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":32},"generated":{"line":1,"column":2243}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":111},"generated":{"line":1,"column":2323}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":136},"generated":{"line":1,"column":2349}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":142},"generated":{"line":1,"column":2355}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":195},"generated":{"line":1,"column":2408}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":263},"generated":{"line":1,"column":2476}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":310},"generated":{"line":1,"column":2523}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","name":"join","original":{"line":25,"column":315},"generated":{"line":1,"column":2528}},{"source":"node_modules/three-stdlib/shaders/FreiChenShader.js","original":{"line":25,"column":320},"generated":{"line":1,"column":2533}}],"sources":{"node_modules/three-stdlib/shaders/FreiChenShader.js":"import { Vector2 } from 'three';\n\n/**\n * Edge Detection Shader using Frei-Chen filter\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n *\n * aspect: vec2 of (1/width, 1/height)\n */\n\nconst FreiChenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    aspect: {\n      value: new Vector2(512, 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform vec2 aspect;', 'vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);', 'mat3 G[9];', // hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n  'const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );', 'const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );', 'const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );', 'const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );', 'const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );', 'const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );', 'const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );', 'const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );', 'const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );', 'void main(void)', '{', '\tG[0] = g0,', '\tG[1] = g1,', '\tG[2] = g2,', '\tG[3] = g3,', '\tG[4] = g4,', '\tG[5] = g5,', '\tG[6] = g6,', '\tG[7] = g7,', '\tG[8] = g8;', '\tmat3 I;', '\tfloat cnv[9];', '\tvec3 sample;',\n  /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n  '\tfor (float i=0.0; i<3.0; i++) {', '\t\tfor (float j=0.0; j<3.0; j++) {', '\t\t\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;', '\t\t\tI[int(i)][int(j)] = length(sample);', '\t\t}', '\t}',\n  /* calculate the convolution values for all the masks */\n  '\tfor (int i=0; i<9; i++) {', '\t\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);', '\t\tcnv[i] = dp3 * dp3;', '\t}', '\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);', '\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);', '\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);', '}'].join('\\n')\n};\n\nexport { FreiChenShader };\n"},"lineCount":null}},"error":null,"hash":"8a48dff75f358d68859afb1741b9c567","cacheData":{"env":{}}}