{"id":"BfjA","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988},{"name":"three","loc":{"line":1,"column":24,"index":24},"parent":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/shaders/SMAAShader.js","resolved":"/home/moh/Desktop/MYPortfolio/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.SMAAWeightsShader=exports.SMAAEdgesShader=exports.SMAABlendShader=void 0;var e=require(\"three\");const t=exports.SMAAEdgesShader={defines:{SMAA_THRESHOLD:\"0.1\"},uniforms:{tDiffuse:{value:null},resolution:{value:new e.Vector2(1/1024,1/512)}},vertexShader:[\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"varying vec4 vOffset[ 3 ];\",\"void SMAAEdgeDetectionVS( vec2 texcoord ) {\",\"\\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );\",\"\\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );\",\"\\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );\",\"}\",\"void main() {\",\"\\tvUv = uv;\",\"\\tSMAAEdgeDetectionVS( vUv );\",\"\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"varying vec4 vOffset[ 3 ];\",\"vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {\",\"\\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );\",\"\\tvec4 delta;\",\"\\tvec3 C = texture2D( colorTex, texcoord ).rgb;\",\"\\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;\",\"\\tvec3 t = abs( C - Cleft );\",\"\\tdelta.x = max( max( t.r, t.g ), t.b );\",\"\\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;\",\"\\tt = abs( C - Ctop );\",\"\\tdelta.y = max( max( t.r, t.g ), t.b );\",\"\\tvec2 edges = step( threshold, delta.xy );\",\"\\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )\",\"\\t\\tdiscard;\",\"\\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;\",\"\\tt = abs( C - Cright );\",\"\\tdelta.z = max( max( t.r, t.g ), t.b );\",\"\\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;\",\"\\tt = abs( C - Cbottom );\",\"\\tdelta.w = max( max( t.r, t.g ), t.b );\",\"\\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );\",\"\\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;\",\"\\tt = abs( C - Cleftleft );\",\"\\tdelta.z = max( max( t.r, t.g ), t.b );\",\"\\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;\",\"\\tt = abs( C - Ctoptop );\",\"\\tdelta.w = max( max( t.r, t.g ), t.b );\",\"\\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );\",\"\\tedges.xy *= step( 0.5 * maxDelta, delta.xy );\",\"\\treturn vec4( edges, 0.0, 0.0 );\",\"}\",\"void main() {\",\"\\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );\",\"}\"].join(\"\\n\")},o=exports.SMAAWeightsShader={defines:{SMAA_MAX_SEARCH_STEPS:\"8\",SMAA_AREATEX_MAX_DISTANCE:\"16\",SMAA_AREATEX_PIXEL_SIZE:\"( 1.0 / vec2( 160.0, 560.0 ) )\",SMAA_AREATEX_SUBTEX_SIZE:\"( 1.0 / 7.0 )\"},uniforms:{tDiffuse:{value:null},tArea:{value:null},tSearch:{value:null},resolution:{value:new e.Vector2(1/1024,1/512)}},vertexShader:[\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"varying vec4 vOffset[ 3 ];\",\"varying vec2 vPixcoord;\",\"void SMAABlendingWeightCalculationVS( vec2 texcoord ) {\",\"\\tvPixcoord = texcoord / resolution;\",\"\\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );\",\"\\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );\",\"\\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );\",\"}\",\"void main() {\",\"\\tvUv = uv;\",\"\\tSMAABlendingWeightCalculationVS( vUv );\",\"\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )\",\"uniform sampler2D tDiffuse;\",\"uniform sampler2D tArea;\",\"uniform sampler2D tSearch;\",\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"varying vec4 vOffset[3];\",\"varying vec2 vPixcoord;\",\"#if __VERSION__ == 100\",\"vec2 round( vec2 x ) {\",\"\\treturn sign( x ) * floor( abs( x ) + 0.5 );\",\"}\",\"#endif\",\"float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {\",\"\\te.r = bias + e.r * scale;\",\"\\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;\",\"}\",\"float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\"\\tvec2 e = vec2( 0.0, 1.0 );\",\"\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\",\"\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\"\\t\\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;\",\"\\t\\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;\",\"\\t}\",\"\\ttexcoord.x += 0.25 * resolution.x;\",\"\\ttexcoord.x += resolution.x;\",\"\\ttexcoord.x += 2.0 * resolution.x;\",\"\\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);\",\"\\treturn texcoord.x;\",\"}\",\"float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\"\\tvec2 e = vec2( 0.0, 1.0 );\",\"\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\",\"\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\"\\t\\ttexcoord += vec2( 2.0, 0.0 ) * resolution;\",\"\\t\\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;\",\"\\t}\",\"\\ttexcoord.x -= 0.25 * resolution.x;\",\"\\ttexcoord.x -= resolution.x;\",\"\\ttexcoord.x -= 2.0 * resolution.x;\",\"\\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );\",\"\\treturn texcoord.x;\",\"}\",\"float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\"\\tvec2 e = vec2( 1.0, 0.0 );\",\"\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\",\"\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\"\\t\\ttexcoord += vec2( 0.0, 2.0 ) * resolution;\",\"\\t\\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;\",\"\\t}\",\"\\ttexcoord.y -= 0.25 * resolution.y;\",\"\\ttexcoord.y -= resolution.y;\",\"\\ttexcoord.y -= 2.0 * resolution.y;\",\"\\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );\",\"\\treturn texcoord.y;\",\"}\",\"float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\"\\tvec2 e = vec2( 1.0, 0.0 );\",\"\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\",\"\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\"\\t\\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;\",\"\\t\\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;\",\"\\t}\",\"\\ttexcoord.y += 0.25 * resolution.y;\",\"\\ttexcoord.y += resolution.y;\",\"\\ttexcoord.y += 2.0 * resolution.y;\",\"\\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );\",\"\\treturn texcoord.y;\",\"}\",\"vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {\",\"\\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;\",\"\\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );\",\"\\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;\",\"\\treturn texture2D( areaTex, texcoord, 0.0 ).rg;\",\"}\",\"vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {\",\"\\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );\",\"\\tvec2 e = texture2D( edgesTex, texcoord ).rg;\",\"\\tif ( e.g > 0.0 ) {\",\"\\t\\tvec2 d;\",\"\\t\\tvec2 coords;\",\"\\t\\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );\",\"\\t\\tcoords.y = offset[ 1 ].y;\",\"\\t\\td.x = coords.x;\",\"\\t\\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;\",\"\\t\\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );\",\"\\t\\td.y = coords.x;\",\"\\t\\td = d / resolution.x - pixcoord.x;\",\"\\t\\tvec2 sqrt_d = sqrt( abs( d ) );\",\"\\t\\tcoords.y -= 1.0 * resolution.y;\",\"\\t\\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;\",\"\\t\\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );\",\"\\t}\",\"\\tif ( e.r > 0.0 ) {\",\"\\t\\tvec2 d;\",\"\\t\\tvec2 coords;\",\"\\t\\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );\",\"\\t\\tcoords.x = offset[ 0 ].x;\",\"\\t\\td.x = coords.y;\",\"\\t\\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;\",\"\\t\\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );\",\"\\t\\td.y = coords.y;\",\"\\t\\td = d / resolution.y - pixcoord.y;\",\"\\t\\tvec2 sqrt_d = sqrt( abs( d ) );\",\"\\t\\tcoords.y -= 1.0 * resolution.y;\",\"\\t\\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;\",\"\\t\\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );\",\"\\t}\",\"\\treturn weights;\",\"}\",\"void main() {\",\"\\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );\",\"}\"].join(\"\\n\")},r=exports.SMAABlendShader={uniforms:{tDiffuse:{value:null},tColor:{value:null},resolution:{value:new e.Vector2(1/1024,1/512)}},vertexShader:[\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"varying vec4 vOffset[ 2 ];\",\"void SMAANeighborhoodBlendingVS( vec2 texcoord ) {\",\"\\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );\",\"\\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );\",\"}\",\"void main() {\",\"\\tvUv = uv;\",\"\\tSMAANeighborhoodBlendingVS( vUv );\",\"\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform sampler2D tColor;\",\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"varying vec4 vOffset[ 2 ];\",\"vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {\",\"\\tvec4 a;\",\"\\ta.xz = texture2D( blendTex, texcoord ).xz;\",\"\\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;\",\"\\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;\",\"\\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {\",\"\\t\\treturn texture2D( colorTex, texcoord, 0.0 );\",\"\\t} else {\",\"\\t\\tvec2 offset;\",\"\\t\\toffset.x = a.a > a.b ? a.a : -a.b;\",\"\\t\\toffset.y = a.g > a.r ? -a.g : a.r;\",\"\\t\\tif ( abs( offset.x ) > abs( offset.y )) {\",\"\\t\\t\\toffset.y = 0.0;\",\"\\t\\t} else {\",\"\\t\\t\\toffset.x = 0.0;\",\"\\t\\t}\",\"\\t\\tvec4 C = texture2D( colorTex, texcoord, 0.0 );\",\"\\t\\ttexcoord += sign( offset ) * resolution;\",\"\\t\\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );\",\"\\t\\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );\",\"\\t\\tC.xyz = pow(C.xyz, vec3(2.2));\",\"\\t\\tCop.xyz = pow(Cop.xyz, vec3(2.2));\",\"\\t\\tvec4 mixed = mix(C, Cop, s);\",\"\\t\\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));\",\"\\t\\treturn mixed;\",\"\\t}\",\"}\",\"void main() {\",\"\\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );\",\"}\"].join(\"\\n\")};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":94}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":102}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":118}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":126}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":149,"column":1},"generated":{"line":1,"column":147}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":149}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"_three","original":{"line":1,"column":0},"generated":{"line":1,"column":153}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"require","original":{"line":1,"column":0},"generated":{"line":1,"column":155}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":163}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":9,"column":0},"generated":{"line":1,"column":172}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAAEdgesShader","original":{"line":9,"column":6},"generated":{"line":1,"column":178}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"exports","original":{"line":9,"column":21},"generated":{"line":1,"column":180}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAAEdgesShader","original":{"line":9,"column":21},"generated":{"line":1,"column":188}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":9,"column":24},"generated":{"line":1,"column":204}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"defines","original":{"line":10,"column":2},"generated":{"line":1,"column":205}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":10,"column":11},"generated":{"line":1,"column":213}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAA_THRESHOLD","original":{"line":11,"column":4},"generated":{"line":1,"column":214}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":11,"column":20},"generated":{"line":1,"column":229}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"uniforms","original":{"line":13,"column":2},"generated":{"line":1,"column":236}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":13,"column":12},"generated":{"line":1,"column":245}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"tDiffuse","original":{"line":14,"column":4},"generated":{"line":1,"column":246}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":14,"column":14},"generated":{"line":1,"column":255}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":15,"column":6},"generated":{"line":1,"column":256}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":15,"column":13},"generated":{"line":1,"column":262}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"resolution","original":{"line":17,"column":4},"generated":{"line":1,"column":268}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":17,"column":16},"generated":{"line":1,"column":279}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":18,"column":6},"generated":{"line":1,"column":280}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":18,"column":13},"generated":{"line":1,"column":286}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"Vector2","original":{"line":18,"column":17},"generated":{"line":1,"column":290}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":18,"column":24},"generated":{"line":1,"column":292}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":18,"column":25},"generated":{"line":1,"column":300}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":18,"column":29},"generated":{"line":1,"column":302}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":18,"column":35},"generated":{"line":1,"column":307}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":18,"column":39},"generated":{"line":1,"column":309}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"vertexShader","original":{"line":21,"column":2},"generated":{"line":1,"column":316}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":21,"column":16},"generated":{"line":1,"column":329}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":21,"column":17},"generated":{"line":1,"column":330}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":21,"column":45},"generated":{"line":1,"column":357}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":21,"column":66},"generated":{"line":1,"column":377}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":21,"column":96},"generated":{"line":1,"column":406}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":21,"column":143},"generated":{"line":1,"column":452}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":22,"column":2},"generated":{"line":1,"column":535}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":23,"column":2},"generated":{"line":1,"column":618}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":2},"generated":{"line":1,"column":701}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":7},"generated":{"line":1,"column":705}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":24},"generated":{"line":1,"column":721}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":38},"generated":{"line":1,"column":735}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":70},"generated":{"line":1,"column":767}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":148},"generated":{"line":1,"column":845}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"join","original":{"line":24,"column":153},"generated":{"line":1,"column":850}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":24,"column":158},"generated":{"line":1,"column":855}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"fragmentShader","original":{"line":25,"column":2},"generated":{"line":1,"column":861}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":25,"column":18},"generated":{"line":1,"column":876}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":25,"column":19},"generated":{"line":1,"column":877}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":25,"column":50},"generated":{"line":1,"column":907}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":25,"column":71},"generated":{"line":1,"column":927}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":25,"column":101},"generated":{"line":1,"column":956}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":25,"column":189},"generated":{"line":1,"column":1043}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":2},"generated":{"line":1,"column":1104}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":18},"generated":{"line":1,"column":1120}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":68},"generated":{"line":1,"column":1170}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":126},"generated":{"line":1,"column":1228}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":157},"generated":{"line":1,"column":1259}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":200},"generated":{"line":1,"column":1302}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":257},"generated":{"line":1,"column":1359}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":26,"column":282},"generated":{"line":1,"column":1384}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":27,"column":2},"generated":{"line":1,"column":1427}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":28,"column":2},"generated":{"line":1,"column":1473}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":28,"column":51},"generated":{"line":1,"column":1522}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":29,"column":2},"generated":{"line":1,"column":1537}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":29,"column":61},"generated":{"line":1,"column":1596}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":29,"column":88},"generated":{"line":1,"column":1623}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":29,"column":131},"generated":{"line":1,"column":1666}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":29,"column":192},"generated":{"line":1,"column":1727}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":29,"column":220},"generated":{"line":1,"column":1755}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":30,"column":2},"generated":{"line":1,"column":1798}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":31,"column":2},"generated":{"line":1,"column":1876}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":31,"column":65},"generated":{"line":1,"column":1939}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":31,"column":95},"generated":{"line":1,"column":1969}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":31,"column":138},"generated":{"line":1,"column":2012}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":31,"column":198},"generated":{"line":1,"column":2072}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":31,"column":226},"generated":{"line":1,"column":2100}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":32,"column":2},"generated":{"line":1,"column":2143}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":2},"generated":{"line":1,"column":2200}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":52},"generated":{"line":1,"column":2250}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":88},"generated":{"line":1,"column":2286}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":93},"generated":{"line":1,"column":2290}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":110},"generated":{"line":1,"column":2306}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":181},"generated":{"line":1,"column":2377}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"join","original":{"line":33,"column":186},"generated":{"line":1,"column":2382}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":33,"column":191},"generated":{"line":1,"column":2387}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAAWeightsShader","original":{"line":35,"column":6},"generated":{"line":1,"column":2394}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"exports","original":{"line":35,"column":23},"generated":{"line":1,"column":2396}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAAWeightsShader","original":{"line":35,"column":23},"generated":{"line":1,"column":2404}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":35,"column":26},"generated":{"line":1,"column":2422}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"defines","original":{"line":36,"column":2},"generated":{"line":1,"column":2423}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":36,"column":11},"generated":{"line":1,"column":2431}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAA_MAX_SEARCH_STEPS","original":{"line":37,"column":4},"generated":{"line":1,"column":2432}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":37,"column":27},"generated":{"line":1,"column":2454}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAA_AREATEX_MAX_DISTANCE","original":{"line":38,"column":4},"generated":{"line":1,"column":2458}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":38,"column":31},"generated":{"line":1,"column":2484}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAA_AREATEX_PIXEL_SIZE","original":{"line":39,"column":4},"generated":{"line":1,"column":2489}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":39,"column":29},"generated":{"line":1,"column":2513}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAA_AREATEX_SUBTEX_SIZE","original":{"line":40,"column":4},"generated":{"line":1,"column":2546}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":40,"column":30},"generated":{"line":1,"column":2571}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"uniforms","original":{"line":42,"column":2},"generated":{"line":1,"column":2588}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":42,"column":12},"generated":{"line":1,"column":2597}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"tDiffuse","original":{"line":43,"column":4},"generated":{"line":1,"column":2598}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":43,"column":14},"generated":{"line":1,"column":2607}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":44,"column":6},"generated":{"line":1,"column":2608}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":44,"column":13},"generated":{"line":1,"column":2614}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"tArea","original":{"line":46,"column":4},"generated":{"line":1,"column":2620}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":46,"column":11},"generated":{"line":1,"column":2626}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":47,"column":6},"generated":{"line":1,"column":2627}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":47,"column":13},"generated":{"line":1,"column":2633}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"tSearch","original":{"line":49,"column":4},"generated":{"line":1,"column":2639}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":49,"column":13},"generated":{"line":1,"column":2647}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":50,"column":6},"generated":{"line":1,"column":2648}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":50,"column":13},"generated":{"line":1,"column":2654}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"resolution","original":{"line":52,"column":4},"generated":{"line":1,"column":2660}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":52,"column":16},"generated":{"line":1,"column":2671}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":53,"column":6},"generated":{"line":1,"column":2672}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":53,"column":13},"generated":{"line":1,"column":2678}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"Vector2","original":{"line":53,"column":17},"generated":{"line":1,"column":2682}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":53,"column":24},"generated":{"line":1,"column":2684}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":53,"column":25},"generated":{"line":1,"column":2692}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":53,"column":29},"generated":{"line":1,"column":2694}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":53,"column":35},"generated":{"line":1,"column":2699}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":53,"column":39},"generated":{"line":1,"column":2701}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"vertexShader","original":{"line":56,"column":2},"generated":{"line":1,"column":2708}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":16},"generated":{"line":1,"column":2721}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":17},"generated":{"line":1,"column":2722}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":45},"generated":{"line":1,"column":2749}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":66},"generated":{"line":1,"column":2769}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":96},"generated":{"line":1,"column":2798}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":123},"generated":{"line":1,"column":2824}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":56,"column":182},"generated":{"line":1,"column":2882}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":57,"column":2},"generated":{"line":1,"column":2921}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":58,"column":2},"generated":{"line":1,"column":3009}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":2},"generated":{"line":1,"column":3099}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":145},"generated":{"line":1,"column":3242}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":150},"generated":{"line":1,"column":3246}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":167},"generated":{"line":1,"column":3262}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":181},"generated":{"line":1,"column":3276}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":225},"generated":{"line":1,"column":3320}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":303},"generated":{"line":1,"column":3398}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"join","original":{"line":60,"column":308},"generated":{"line":1,"column":3403}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":60,"column":313},"generated":{"line":1,"column":3408}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"fragmentShader","original":{"line":61,"column":2},"generated":{"line":1,"column":3414}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":18},"generated":{"line":1,"column":3429}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":19},"generated":{"line":1,"column":3430}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":138},"generated":{"line":1,"column":3548}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":169},"generated":{"line":1,"column":3578}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":197},"generated":{"line":1,"column":3605}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":227},"generated":{"line":1,"column":3634}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":255},"generated":{"line":1,"column":3661}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":276},"generated":{"line":1,"column":3681}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":304},"generated":{"line":1,"column":3708}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":331},"generated":{"line":1,"column":3734}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":357},"generated":{"line":1,"column":3759}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":383},"generated":{"line":1,"column":3784}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":431},"generated":{"line":1,"column":3832}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":436},"generated":{"line":1,"column":3836}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":61,"column":446},"generated":{"line":1,"column":3845}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":65,"column":2},"generated":{"line":1,"column":3928}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":65,"column":32},"generated":{"line":1,"column":3958}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":65,"column":85},"generated":{"line":1,"column":4011}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":65,"column":90},"generated":{"line":1,"column":4015}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":73,"column":2},"generated":{"line":1,"column":4110}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":73,"column":33},"generated":{"line":1,"column":4141}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":74,"column":2},"generated":{"line":1,"column":4198}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":74,"column":52},"generated":{"line":1,"column":4249}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":74,"column":100},"generated":{"line":1,"column":4298}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":74,"column":172},"generated":{"line":1,"column":4371}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":75,"column":2},"generated":{"line":1,"column":4377}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":76,"column":2},"generated":{"line":1,"column":4416}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":77,"column":2},"generated":{"line":1,"column":4448}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":78,"column":2},"generated":{"line":1,"column":4486}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":78,"column":77},"generated":{"line":1,"column":4561}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":78,"column":100},"generated":{"line":1,"column":4584}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":78,"column":105},"generated":{"line":1,"column":4588}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":78,"column":202},"generated":{"line":1,"column":4684}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":78,"column":233},"generated":{"line":1,"column":4715}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":2},"generated":{"line":1,"column":4772}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":52},"generated":{"line":1,"column":4823}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":100},"generated":{"line":1,"column":4872}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":172},"generated":{"line":1,"column":4945}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":178},"generated":{"line":1,"column":4951}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":217},"generated":{"line":1,"column":4990}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":249},"generated":{"line":1,"column":5022}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":287},"generated":{"line":1,"column":5060}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":364},"generated":{"line":1,"column":5137}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":387},"generated":{"line":1,"column":5160}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":392},"generated":{"line":1,"column":5164}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":486},"generated":{"line":1,"column":5257}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":79,"column":517},"generated":{"line":1,"column":5288}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":80,"column":2},"generated":{"line":1,"column":5345}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":80,"column":52},"generated":{"line":1,"column":5396}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":81,"column":2},"generated":{"line":1,"column":5445}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":81,"column":74},"generated":{"line":1,"column":5518}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":81,"column":80},"generated":{"line":1,"column":5524}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":82,"column":2},"generated":{"line":1,"column":5563}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":83,"column":2},"generated":{"line":1,"column":5595}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":84,"column":2},"generated":{"line":1,"column":5633}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":85,"column":2},"generated":{"line":1,"column":5713}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":85,"column":25},"generated":{"line":1,"column":5736}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":85,"column":30},"generated":{"line":1,"column":5740}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":85,"column":126},"generated":{"line":1,"column":5835}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":85,"column":157},"generated":{"line":1,"column":5866}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":86,"column":2},"generated":{"line":1,"column":5923}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":86,"column":52},"generated":{"line":1,"column":5974}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":87,"column":2},"generated":{"line":1,"column":6023}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":87,"column":74},"generated":{"line":1,"column":6096}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":87,"column":80},"generated":{"line":1,"column":6102}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":88,"column":2},"generated":{"line":1,"column":6141}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":6173}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":90,"column":2},"generated":{"line":1,"column":6211}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":91,"column":2},"generated":{"line":1,"column":6291}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":91,"column":25},"generated":{"line":1,"column":6314}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":91,"column":30},"generated":{"line":1,"column":6318}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":92,"column":2},"generated":{"line":1,"column":6402}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":93,"column":2},"generated":{"line":1,"column":6497}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":2},"generated":{"line":1,"column":6584}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":55},"generated":{"line":1,"column":6637}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":106},"generated":{"line":1,"column":6688}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":111},"generated":{"line":1,"column":6692}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":287},"generated":{"line":1,"column":6867}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":334},"generated":{"line":1,"column":6914}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":94,"column":383},"generated":{"line":1,"column":6963}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":95,"column":2},"generated":{"line":1,"column":6986}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":96,"column":2},"generated":{"line":1,"column":7000}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":96,"column":20},"generated":{"line":1,"column":7019}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":96,"column":107},"generated":{"line":1,"column":7107}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":97,"column":2},"generated":{"line":1,"column":7139}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":100,"column":2},"generated":{"line":1,"column":7161}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":101,"column":2},"generated":{"line":1,"column":7216}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":101,"column":90},"generated":{"line":1,"column":7305}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":103,"column":2},"generated":{"line":1,"column":7327}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":105,"column":2},"generated":{"line":1,"column":7368}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":106,"column":2},"generated":{"line":1,"column":7406}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":107,"column":2},"generated":{"line":1,"column":7444}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":109,"column":2},"generated":{"line":1,"column":7525}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":109,"column":86},"generated":{"line":1,"column":7610}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":109,"column":92},"generated":{"line":1,"column":7616}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":110,"column":2},"generated":{"line":1,"column":7639}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":111,"column":2},"generated":{"line":1,"column":7653}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":111,"column":20},"generated":{"line":1,"column":7672}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":111,"column":105},"generated":{"line":1,"column":7758}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":112,"column":2},"generated":{"line":1,"column":7790}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":113,"column":2},"generated":{"line":1,"column":7812}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":114,"column":2},"generated":{"line":1,"column":7867}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":114,"column":89},"generated":{"line":1,"column":7955}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":115,"column":2},"generated":{"line":1,"column":7977}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":117,"column":2},"generated":{"line":1,"column":8018}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":118,"column":2},"generated":{"line":1,"column":8056}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":119,"column":2},"generated":{"line":1,"column":8094}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":2},"generated":{"line":1,"column":8175}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":86},"generated":{"line":1,"column":8260}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":92},"generated":{"line":1,"column":8266}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":112},"generated":{"line":1,"column":8286}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":117},"generated":{"line":1,"column":8290}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":134},"generated":{"line":1,"column":8306}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":253},"generated":{"line":1,"column":8425}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"join","original":{"line":120,"column":258},"generated":{"line":1,"column":8430}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":120,"column":263},"generated":{"line":1,"column":8435}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAABlendShader","original":{"line":122,"column":6},"generated":{"line":1,"column":8442}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"exports","original":{"line":122,"column":21},"generated":{"line":1,"column":8444}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"SMAABlendShader","original":{"line":122,"column":21},"generated":{"line":1,"column":8452}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":122,"column":24},"generated":{"line":1,"column":8468}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"uniforms","original":{"line":123,"column":2},"generated":{"line":1,"column":8469}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":123,"column":12},"generated":{"line":1,"column":8478}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"tDiffuse","original":{"line":124,"column":4},"generated":{"line":1,"column":8479}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":124,"column":14},"generated":{"line":1,"column":8488}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":125,"column":6},"generated":{"line":1,"column":8489}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":125,"column":13},"generated":{"line":1,"column":8495}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"tColor","original":{"line":127,"column":4},"generated":{"line":1,"column":8501}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":127,"column":12},"generated":{"line":1,"column":8508}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":128,"column":6},"generated":{"line":1,"column":8509}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":128,"column":13},"generated":{"line":1,"column":8515}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"resolution","original":{"line":130,"column":4},"generated":{"line":1,"column":8521}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":130,"column":16},"generated":{"line":1,"column":8532}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"value","original":{"line":131,"column":6},"generated":{"line":1,"column":8533}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":131,"column":13},"generated":{"line":1,"column":8539}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"Vector2","original":{"line":131,"column":17},"generated":{"line":1,"column":8543}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":131,"column":24},"generated":{"line":1,"column":8545}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":131,"column":25},"generated":{"line":1,"column":8553}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":131,"column":29},"generated":{"line":1,"column":8555}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":131,"column":35},"generated":{"line":1,"column":8560}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":131,"column":39},"generated":{"line":1,"column":8562}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"vertexShader","original":{"line":134,"column":2},"generated":{"line":1,"column":8569}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":134,"column":16},"generated":{"line":1,"column":8582}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":134,"column":17},"generated":{"line":1,"column":8583}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":134,"column":45},"generated":{"line":1,"column":8610}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":134,"column":66},"generated":{"line":1,"column":8630}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":134,"column":96},"generated":{"line":1,"column":8659}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":134,"column":150},"generated":{"line":1,"column":8712}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":135,"column":2},"generated":{"line":1,"column":8794}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":2},"generated":{"line":1,"column":8876}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":7},"generated":{"line":1,"column":8880}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":24},"generated":{"line":1,"column":8896}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":38},"generated":{"line":1,"column":8910}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":77},"generated":{"line":1,"column":8949}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":155},"generated":{"line":1,"column":9027}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"join","original":{"line":136,"column":160},"generated":{"line":1,"column":9032}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":136,"column":165},"generated":{"line":1,"column":9037}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"fragmentShader","original":{"line":137,"column":2},"generated":{"line":1,"column":9043}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":18},"generated":{"line":1,"column":9058}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":19},"generated":{"line":1,"column":9059}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":50},"generated":{"line":1,"column":9089}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":79},"generated":{"line":1,"column":9117}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":107},"generated":{"line":1,"column":9144}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":128},"generated":{"line":1,"column":9164}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":137,"column":158},"generated":{"line":1,"column":9193}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":138,"column":2},"generated":{"line":1,"column":9304}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":138,"column":14},"generated":{"line":1,"column":9316}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":138,"column":61},"generated":{"line":1,"column":9363}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":138,"column":112},"generated":{"line":1,"column":9414}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":139,"column":2},"generated":{"line":1,"column":9465}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":139,"column":57},"generated":{"line":1,"column":9520}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":139,"column":107},"generated":{"line":1,"column":9571}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":142,"column":2},"generated":{"line":1,"column":9584}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":142,"column":20},"generated":{"line":1,"column":9603}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":143,"column":2},"generated":{"line":1,"column":9644}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":145,"column":2},"generated":{"line":1,"column":9685}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":146,"column":2},"generated":{"line":1,"column":9733}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":146,"column":24},"generated":{"line":1,"column":9757}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":146,"column":38},"generated":{"line":1,"column":9772}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":146,"column":60},"generated":{"line":1,"column":9796}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":147,"column":2},"generated":{"line":1,"column":9804}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":147,"column":54},"generated":{"line":1,"column":9857}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":147,"column":100},"generated":{"line":1,"column":9904}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":147,"column":154},"generated":{"line":1,"column":9959}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":2},"generated":{"line":1,"column":10046}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":38},"generated":{"line":1,"column":10083}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":78},"generated":{"line":1,"column":10124}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":112},"generated":{"line":1,"column":10159}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":162},"generated":{"line":1,"column":10210}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":181},"generated":{"line":1,"column":10230}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":187},"generated":{"line":1,"column":10236}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":192},"generated":{"line":1,"column":10240}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":209},"generated":{"line":1,"column":10256}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":290},"generated":{"line":1,"column":10337}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","name":"join","original":{"line":148,"column":295},"generated":{"line":1,"column":10342}},{"source":"node_modules/three-stdlib/shaders/SMAAShader.js","original":{"line":148,"column":300},"generated":{"line":1,"column":10347}}],"sources":{"node_modules/three-stdlib/shaders/SMAAShader.js":"import { Vector2 } from 'three';\n\n/**\n * WebGL port of Subpixel Morphological Antialiasing (SMAA) v2.8\n * Preset: SMAA 1x Medium (with color edge detection)\n * https://github.com/iryoku/smaa/releases/tag/v2.8\n */\n\nconst SMAAEdgesShader = {\n  defines: {\n    SMAA_THRESHOLD: '0.1'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'void SMAAEdgeDetectionVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAAEdgeDetectionVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {', '\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );', // Calculate color deltas:\n  '\tvec4 delta;', '\tvec3 C = texture2D( colorTex, texcoord ).rgb;', '\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;', '\tvec3 t = abs( C - Cleft );', '\tdelta.x = max( max( t.r, t.g ), t.b );', '\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;', '\tt = abs( C - Ctop );', '\tdelta.y = max( max( t.r, t.g ), t.b );', // We do the usual threshold:\n  '\tvec2 edges = step( threshold, delta.xy );', // Then discard if there is no edge:\n  '\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )', '\t\tdiscard;', // Calculate right and bottom deltas:\n  '\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;', '\tt = abs( C - Cright );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;', '\tt = abs( C - Cbottom );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the maximum delta in the direct neighborhood:\n  '\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );', // Calculate left-left and top-top deltas:\n  '\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;', '\tt = abs( C - Cleftleft );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;', '\tt = abs( C - Ctoptop );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the final maximum delta:\n  '\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );', // Local contrast adaptation in action:\n  '\tedges.xy *= step( 0.5 * maxDelta, delta.xy );', '\treturn vec4( edges, 0.0, 0.0 );', '}', 'void main() {', '\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );', '}'].join('\\n')\n};\nconst SMAAWeightsShader = {\n  defines: {\n    SMAA_MAX_SEARCH_STEPS: '8',\n    SMAA_AREATEX_MAX_DISTANCE: '16',\n    SMAA_AREATEX_PIXEL_SIZE: '( 1.0 / vec2( 160.0, 560.0 ) )',\n    SMAA_AREATEX_SUBTEX_SIZE: '( 1.0 / 7.0 )'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tArea: {\n      value: null\n    },\n    tSearch: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'varying vec2 vPixcoord;', 'void SMAABlendingWeightCalculationVS( vec2 texcoord ) {', '\tvPixcoord = texcoord / resolution;', // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\n  '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );', // WebGL port note: Changed sign in Y and W components\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );', // WebGL port note: Changed sign in Y and W components\n  // And these for the searches, they indicate the ends of the loops:\n  '\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );', '}', 'void main() {', '\tvUv = uv;', '\tSMAABlendingWeightCalculationVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tArea;', 'uniform sampler2D tSearch;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[3];', 'varying vec2 vPixcoord;', '#if __VERSION__ == 100', 'vec2 round( vec2 x ) {', '\treturn sign( x ) * floor( abs( x ) + 0.5 );', '}', '#endif', 'float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {', // Not required if searchTex accesses are set to point:\n  // float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);\n  // e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE +\n  //     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\n  '\te.r = bias + e.r * scale;', '\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;', '}', 'float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {',\n  /**\n   * @PSEUDO_GATHER4\n   * This texcoord has been offset by (-0.25, -0.125) in the vertex shader to\n   * sample between edge, thus fetching four edges in a row.\n   * Sampling with different offsets in each direction allows to disambiguate\n   * which edges are active from the four fetched ones.\n   */\n  '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', // We correct the previous (-0.25, -0.125) offset we applied:\n  '\ttexcoord.x += 0.25 * resolution.x;', // The searches are bias by 1, so adjust the coords accordingly:\n  '\ttexcoord.x += resolution.x;', // Disambiguate the length added by the last step:\n  '\ttexcoord.x += 2.0 * resolution.x;', // Undo last step\n  '\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);', '\treturn texcoord.x;', '}', 'float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', '\ttexcoord.x -= 0.25 * resolution.x;', '\ttexcoord.x -= resolution.x;', '\ttexcoord.x -= 2.0 * resolution.x;', '\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );', '\treturn texcoord.x;', '}', 'float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y -= 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y += 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {', // Rounding prevents precision errors of bilinear filtering:\n  '\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;', // We do a scale and bias for mapping to texel space:\n  '\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );', // Move to proper place, according to the subpixel offset:\n  '\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;', '\treturn texture2D( areaTex, texcoord, 0.0 ).rg;', '}', 'vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {', '\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );', '\tvec2 e = texture2D( edgesTex, texcoord ).rg;', '\tif ( e.g > 0.0 ) {', // Edge at north\n  '\t\tvec2 d;', // Find the distance to the left:\n  '\t\tvec2 coords;', '\t\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );', '\t\tcoords.y = offset[ 1 ].y;', // offset[1].y = texcoord.y - 0.25 * resolution.y (@CROSSING_OFFSET)\n  '\t\td.x = coords.x;', // Now fetch the left crossing edges, two at a time using bilinear\n  // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\n  // discern what value each edge has:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;', // Find the distance to the right:\n  '\t\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );', '\t\td.y = coords.x;', // We want the distances to be in pixel units (doing this here allow to\n  // better interleave arithmetic and memory accesses):\n  '\t\td = d / resolution.x - pixcoord.x;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the right crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;', // Ok, we know how this pattern looks like, now it is time for getting\n  // the actual area:\n  '\t\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );', '\t}', '\tif ( e.r > 0.0 ) {', // Edge at west\n  '\t\tvec2 d;', // Find the distance to the top:\n  '\t\tvec2 coords;', '\t\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );', '\t\tcoords.x = offset[ 0 ].x;', // offset[1].x = texcoord.x - 0.25 * resolution.x;\n  '\t\td.x = coords.y;', // Fetch the top crossing edges:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;', // Find the distance to the bottom:\n  '\t\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );', '\t\td.y = coords.y;', // We want the distances to be in pixel units:\n  '\t\td = d / resolution.y - pixcoord.y;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the bottom crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;', // Get the area for this direction:\n  '\t\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );', '\t}', '\treturn weights;', '}', 'void main() {', '\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );', '}'].join('\\n')\n};\nconst SMAABlendShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tColor: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'void SMAANeighborhoodBlendingVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAANeighborhoodBlendingVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform sampler2D tColor;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {', // Fetch the blending weights for current pixel:\n  '\tvec4 a;', '\ta.xz = texture2D( blendTex, texcoord ).xz;', '\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;', '\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;', // Is there any blending weight with a value greater than 0.0?\n  '\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {', '\t\treturn texture2D( colorTex, texcoord, 0.0 );', '\t} else {', // Up to 4 lines can be crossing a pixel (one through each edge). We\n  // favor blending by choosing the line with the maximum weight for each\n  // direction:\n  '\t\tvec2 offset;', '\t\toffset.x = a.a > a.b ? a.a : -a.b;', // left vs. right\n  '\t\toffset.y = a.g > a.r ? -a.g : a.r;', // top vs. bottom // WebGL port note: Changed signs\n  // Then we go in the direction that has the maximum weight:\n  '\t\tif ( abs( offset.x ) > abs( offset.y )) {', // horizontal vs. vertical\n  '\t\t\toffset.y = 0.0;', '\t\t} else {', '\t\t\toffset.x = 0.0;', '\t\t}', // Fetch the opposite color and lerp by hand:\n  '\t\tvec4 C = texture2D( colorTex, texcoord, 0.0 );', '\t\ttexcoord += sign( offset ) * resolution;', '\t\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );', '\t\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );', // WebGL port note: Added gamma correction\n  '\t\tC.xyz = pow(C.xyz, vec3(2.2));', '\t\tCop.xyz = pow(Cop.xyz, vec3(2.2));', '\t\tvec4 mixed = mix(C, Cop, s);', '\t\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));', '\t\treturn mixed;', '\t}', '}', 'void main() {', '\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );', '}'].join('\\n')\n};\n\nexport { SMAABlendShader, SMAAEdgesShader, SMAAWeightsShader };\n"},"lineCount":null}},"error":null,"hash":"62f66d7a0d84684b3f7572b2a4982a18","cacheData":{"env":{}}}