{"id":"SMyH","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988},{"name":"three","loc":{"line":1,"column":33,"index":33},"parent":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/shaders/VolumeShader.js","resolved":"/home/moh/Desktop/MYPortfolio/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.VolumeRenderShader1=void 0;var t=require(\"three\");const e=exports.VolumeRenderShader1={uniforms:{u_size:{value:new t.Vector3(1,1,1)},u_renderstyle:{value:0},u_renderthreshold:{value:.5},u_clim:{value:new t.Vector2(1,1)},u_data:{value:null},u_cmdata:{value:null}},vertexShader:[\"\\t\\tvarying vec4 v_nearpos;\",\"\\t\\tvarying vec4 v_farpos;\",\"\\t\\tvarying vec3 v_position;\",\"\\t\\tvoid main() {\",\"\\t\\t\\t\\tmat4 viewtransformf = modelViewMatrix;\",\"\\t\\t\\t\\tmat4 viewtransformi = inverse(modelViewMatrix);\",\"\\t\\t\\t\\tvec4 position4 = vec4(position, 1.0);\",\"\\t\\t\\t\\tvec4 pos_in_cam = viewtransformf * position4;\",\"\\t\\t\\t\\tpos_in_cam.z = -pos_in_cam.w;\",\"\\t\\t\\t\\tv_nearpos = viewtransformi * pos_in_cam;\",\"\\t\\t\\t\\tpos_in_cam.z = pos_in_cam.w;\",\"\\t\\t\\t\\tv_farpos = viewtransformi * pos_in_cam;\",\"\\t\\t\\t\\tv_position = position;\",\"\\t\\t\\t\\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;\",\"\\t\\t}\"].join(\"\\n\"),fragmentShader:[\"\\t\\tprecision highp float;\",\"\\t\\tprecision mediump sampler3D;\",\"\\t\\tuniform vec3 u_size;\",\"\\t\\tuniform int u_renderstyle;\",\"\\t\\tuniform float u_renderthreshold;\",\"\\t\\tuniform vec2 u_clim;\",\"\\t\\tuniform sampler3D u_data;\",\"\\t\\tuniform sampler2D u_cmdata;\",\"\\t\\tvarying vec3 v_position;\",\"\\t\\tvarying vec4 v_nearpos;\",\"\\t\\tvarying vec4 v_farpos;\",\"\\t\\tconst int MAX_STEPS = 887;\\t// 887 for 512^3, 1774 for 1024^3\",\"\\t\\tconst int REFINEMENT_STEPS = 4;\",\"\\t\\tconst float relative_step_size = 1.0;\",\"\\t\\tconst vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);\",\"\\t\\tconst vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);\",\"\\t\\tconst vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);\",\"\\t\\tconst float shininess = 40.0;\",\"\\t\\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\",\"\\t\\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\",\"\\t\\tfloat sample1(vec3 texcoords);\",\"\\t\\tvec4 apply_colormap(float val);\",\"\\t\\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);\",\"\\t\\tvoid main() {\",\"\\t\\t\\t\\tvec3 farpos = v_farpos.xyz / v_farpos.w;\",\"\\t\\t\\t\\tvec3 nearpos = v_nearpos.xyz / v_nearpos.w;\",\"\\t\\t\\t\\tvec3 view_ray = normalize(nearpos.xyz - farpos.xyz);\",\"\\t\\t\\t\\tfloat distance = dot(nearpos - v_position, view_ray);\",\"\\t\\t\\t\\tdistance = max(distance, min((-0.5 - v_position.x) / view_ray.x,\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(u_size.x - 0.5 - v_position.x) / view_ray.x));\",\"\\t\\t\\t\\tdistance = max(distance, min((-0.5 - v_position.y) / view_ray.y,\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(u_size.y - 0.5 - v_position.y) / view_ray.y));\",\"\\t\\t\\t\\tdistance = max(distance, min((-0.5 - v_position.z) / view_ray.z,\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(u_size.z - 0.5 - v_position.z) / view_ray.z));\",\"\\t\\t\\t\\tvec3 front = v_position + view_ray * distance;\",\"\\t\\t\\t\\tint nsteps = int(-distance / relative_step_size + 0.5);\",\"\\t\\t\\t\\tif ( nsteps < 1 )\",\"\\t\\t\\t\\t\\t\\tdiscard;\",\"\\t\\t\\t\\tvec3 step = ((v_position - front) / u_size) / float(nsteps);\",\"\\t\\t\\t\\tvec3 start_loc = front / u_size;\",\"\\t\\t\\t\\tif (u_renderstyle == 0)\",\"\\t\\t\\t\\t\\t\\tcast_mip(start_loc, step, nsteps, view_ray);\",\"\\t\\t\\t\\telse if (u_renderstyle == 1)\",\"\\t\\t\\t\\t\\t\\tcast_iso(start_loc, step, nsteps, view_ray);\",\"\\t\\t\\t\\tif (gl_FragColor.a < 0.05)\",\"\\t\\t\\t\\t\\t\\tdiscard;\",\"\\t\\t}\",\"\\t\\tfloat sample1(vec3 texcoords) {\",\"\\t\\t\\t\\t/* Sample float value from a 3D texture. Assumes intensity data. */\",\"\\t\\t\\t\\treturn texture(u_data, texcoords.xyz).r;\",\"\\t\\t}\",\"\\t\\tvec4 apply_colormap(float val) {\",\"\\t\\t\\t\\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\",\"\\t\\t\\t\\treturn texture2D(u_cmdata, vec2(val, 0.5));\",\"\\t\\t}\",\"\\t\\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\",\"\\t\\t\\t\\tfloat max_val = -1e6;\",\"\\t\\t\\t\\tint max_i = 100;\",\"\\t\\t\\t\\tvec3 loc = start_loc;\",\"\\t\\t\\t\\tfor (int iter=0; iter<MAX_STEPS; iter++) {\",\"\\t\\t\\t\\t\\t\\tif (iter >= nsteps)\",\"\\t\\t\\t\\t\\t\\t\\t\\tbreak;\",\"\\t\\t\\t\\t\\t\\tfloat val = sample1(loc);\",\"\\t\\t\\t\\t\\t\\tif (val > max_val) {\",\"\\t\\t\\t\\t\\t\\t\\t\\tmax_val = val;\",\"\\t\\t\\t\\t\\t\\t\\t\\tmax_i = iter;\",\"\\t\\t\\t\\t\\t\\t}\",\"\\t\\t\\t\\t\\t\\tloc += step;\",\"\\t\\t\\t\\t}\",\"\\t\\t\\t\\tvec3 iloc = start_loc + step * (float(max_i) - 0.5);\",\"\\t\\t\\t\\tvec3 istep = step / float(REFINEMENT_STEPS);\",\"\\t\\t\\t\\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\",\"\\t\\t\\t\\t\\t\\tmax_val = max(max_val, sample1(iloc));\",\"\\t\\t\\t\\t\\t\\tiloc += istep;\",\"\\t\\t\\t\\t}\",\"\\t\\t\\t\\tgl_FragColor = apply_colormap(max_val);\",\"\\t\\t}\",\"\\t\\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\",\"\\t\\t\\t\\tgl_FragColor = vec4(0.0);\\t// init transparent\",\"\\t\\t\\t\\tvec4 color3 = vec4(0.0);\\t// final color\",\"\\t\\t\\t\\tvec3 dstep = 1.5 / u_size;\\t// step to sample derivative\",\"\\t\\t\\t\\tvec3 loc = start_loc;\",\"\\t\\t\\t\\tfloat low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);\",\"\\t\\t\\t\\tfor (int iter=0; iter<MAX_STEPS; iter++) {\",\"\\t\\t\\t\\t\\t\\tif (iter >= nsteps)\",\"\\t\\t\\t\\t\\t\\t\\t\\tbreak;\",\"\\t\\t\\t\\t\\t\\tfloat val = sample1(loc);\",\"\\t\\t\\t\\t\\t\\tif (val > low_threshold) {\",\"\\t\\t\\t\\t\\t\\t\\t\\tvec3 iloc = loc - 0.5 * step;\",\"\\t\\t\\t\\t\\t\\t\\t\\tvec3 istep = step / float(REFINEMENT_STEPS);\",\"\\t\\t\\t\\t\\t\\t\\t\\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tval = sample1(iloc);\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (val > u_renderthreshold) {\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgl_FragColor = add_lighting(val, iloc, dstep, view_ray);\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\",\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tiloc += istep;\",\"\\t\\t\\t\\t\\t\\t\\t\\t}\",\"\\t\\t\\t\\t\\t\\t}\",\"\\t\\t\\t\\t\\t\\tloc += step;\",\"\\t\\t\\t\\t}\",\"\\t\\t}\",\"\\t\\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)\",\"\\t\\t{\",\"\\t\\t\\t\\tvec3 V = normalize(view_ray);\",\"\\t\\t\\t\\tvec3 N;\",\"\\t\\t\\t\\tfloat val1, val2;\",\"\\t\\t\\t\\tval1 = sample1(loc + vec3(-step[0], 0.0, 0.0));\",\"\\t\\t\\t\\tval2 = sample1(loc + vec3(+step[0], 0.0, 0.0));\",\"\\t\\t\\t\\tN[0] = val1 - val2;\",\"\\t\\t\\t\\tval = max(max(val1, val2), val);\",\"\\t\\t\\t\\tval1 = sample1(loc + vec3(0.0, -step[1], 0.0));\",\"\\t\\t\\t\\tval2 = sample1(loc + vec3(0.0, +step[1], 0.0));\",\"\\t\\t\\t\\tN[1] = val1 - val2;\",\"\\t\\t\\t\\tval = max(max(val1, val2), val);\",\"\\t\\t\\t\\tval1 = sample1(loc + vec3(0.0, 0.0, -step[2]));\",\"\\t\\t\\t\\tval2 = sample1(loc + vec3(0.0, 0.0, +step[2]));\",\"\\t\\t\\t\\tN[2] = val1 - val2;\",\"\\t\\t\\t\\tval = max(max(val1, val2), val);\",\"\\t\\t\\t\\tfloat gm = length(N); // gradient magnitude\",\"\\t\\t\\t\\tN = normalize(N);\",\"\\t\\t\\t\\tfloat Nselect = float(dot(N, V) > 0.0);\",\"\\t\\t\\t\\tN = (2.0 * Nselect - 1.0) * N;\\t// ==\\tNselect * N - (1.0-Nselect)*N;\",\"\\t\\t\\t\\tvec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);\",\"\\t\\t\\t\\tvec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);\",\"\\t\\t\\t\\tvec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);\",\"\\t\\t\\t\\tfor (int i=0; i<1; i++)\",\"\\t\\t\\t\\t{\",\"\\t\\t\\t\\t\\t\\tvec3 L = normalize(view_ray);\\t//lightDirs[i];\",\"\\t\\t\\t\\t\\t\\tfloat lightEnabled = float( length(L) > 0.0 );\",\"\\t\\t\\t\\t\\t\\tL = normalize(L + (1.0 - lightEnabled));\",\"\\t\\t\\t\\t\\t\\tfloat lambertTerm = clamp(dot(N, L), 0.0, 1.0);\",\"\\t\\t\\t\\t\\t\\tvec3 H = normalize(L+V); // Halfway vector\",\"\\t\\t\\t\\t\\t\\tfloat specularTerm = pow(max(dot(H, N), 0.0), shininess);\",\"\\t\\t\\t\\t\\t\\tfloat mask1 = lightEnabled;\",\"\\t\\t\\t\\t\\t\\tambient_color +=\\tmask1 * ambient_color;\\t// * gl_LightSource[i].ambient;\",\"\\t\\t\\t\\t\\t\\tdiffuse_color +=\\tmask1 * lambertTerm;\",\"\\t\\t\\t\\t\\t\\tspecular_color += mask1 * specularTerm * specular_color;\",\"\\t\\t\\t\\t}\",\"\\t\\t\\t\\tvec4 final_color;\",\"\\t\\t\\t\\tvec4 color = apply_colormap(val);\",\"\\t\\t\\t\\tfinal_color = color * (ambient_color + diffuse_color) + specular_color;\",\"\\t\\t\\t\\tfinal_color.a = color.a;\",\"\\t\\t\\t\\treturn final_color;\",\"\\t\\t}\"].join(\"\\n\")};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":79,"column":1},"generated":{"line":1,"column":101}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":103}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"_three","original":{"line":1,"column":0},"generated":{"line":1,"column":107}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"require","original":{"line":1,"column":0},"generated":{"line":1,"column":109}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":117}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":9,"column":0},"generated":{"line":1,"column":126}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"VolumeRenderShader1","original":{"line":9,"column":6},"generated":{"line":1,"column":132}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"exports","original":{"line":9,"column":25},"generated":{"line":1,"column":134}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"VolumeRenderShader1","original":{"line":9,"column":25},"generated":{"line":1,"column":142}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":9,"column":28},"generated":{"line":1,"column":162}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"uniforms","original":{"line":10,"column":2},"generated":{"line":1,"column":163}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":10,"column":12},"generated":{"line":1,"column":172}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"u_size","original":{"line":11,"column":4},"generated":{"line":1,"column":173}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":11,"column":12},"generated":{"line":1,"column":180}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"value","original":{"line":12,"column":6},"generated":{"line":1,"column":181}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":12,"column":13},"generated":{"line":1,"column":187}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"Vector3","original":{"line":12,"column":17},"generated":{"line":1,"column":191}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":12,"column":24},"generated":{"line":1,"column":193}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":12,"column":25},"generated":{"line":1,"column":201}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":12,"column":28},"generated":{"line":1,"column":203}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":12,"column":31},"generated":{"line":1,"column":205}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"u_renderstyle","original":{"line":14,"column":4},"generated":{"line":1,"column":209}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":14,"column":19},"generated":{"line":1,"column":223}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"value","original":{"line":15,"column":6},"generated":{"line":1,"column":224}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":15,"column":13},"generated":{"line":1,"column":230}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"u_renderthreshold","original":{"line":17,"column":4},"generated":{"line":1,"column":233}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":17,"column":23},"generated":{"line":1,"column":251}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"value","original":{"line":18,"column":6},"generated":{"line":1,"column":252}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":18,"column":13},"generated":{"line":1,"column":258}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"u_clim","original":{"line":20,"column":4},"generated":{"line":1,"column":262}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":20,"column":12},"generated":{"line":1,"column":269}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"value","original":{"line":21,"column":6},"generated":{"line":1,"column":270}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":21,"column":13},"generated":{"line":1,"column":276}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"Vector2","original":{"line":21,"column":17},"generated":{"line":1,"column":280}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":21,"column":24},"generated":{"line":1,"column":282}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":21,"column":25},"generated":{"line":1,"column":290}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":21,"column":28},"generated":{"line":1,"column":292}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"u_data","original":{"line":23,"column":4},"generated":{"line":1,"column":296}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":23,"column":12},"generated":{"line":1,"column":303}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"value","original":{"line":24,"column":6},"generated":{"line":1,"column":304}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":24,"column":13},"generated":{"line":1,"column":310}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"u_cmdata","original":{"line":26,"column":4},"generated":{"line":1,"column":316}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":26,"column":14},"generated":{"line":1,"column":325}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"value","original":{"line":27,"column":6},"generated":{"line":1,"column":326}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":27,"column":13},"generated":{"line":1,"column":332}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"vertexShader","original":{"line":30,"column":2},"generated":{"line":1,"column":339}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":30,"column":16},"generated":{"line":1,"column":352}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":30,"column":17},"generated":{"line":1,"column":353}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":30,"column":46},"generated":{"line":1,"column":383}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":30,"column":74},"generated":{"line":1,"column":412}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":30,"column":104},"generated":{"line":1,"column":443}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":32,"column":2},"generated":{"line":1,"column":463}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":32,"column":48},"generated":{"line":1,"column":512}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":36,"column":2},"generated":{"line":1,"column":570}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":36,"column":47},"generated":{"line":1,"column":618}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":37,"column":2},"generated":{"line":1,"column":674}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":37,"column":39},"generated":{"line":1,"column":714}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":38,"column":2},"generated":{"line":1,"column":765}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":38,"column":38},"generated":{"line":1,"column":804}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":39,"column":2},"generated":{"line":1,"column":854}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":39,"column":32},"generated":{"line":1,"column":887}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":39,"column":110},"generated":{"line":1,"column":968}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"join","original":{"line":39,"column":117},"generated":{"line":1,"column":977}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":39,"column":122},"generated":{"line":1,"column":982}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"fragmentShader","original":{"line":40,"column":2},"generated":{"line":1,"column":988}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":18},"generated":{"line":1,"column":1003}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":19},"generated":{"line":1,"column":1004}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":47},"generated":{"line":1,"column":1033}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":81},"generated":{"line":1,"column":1068}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":107},"generated":{"line":1,"column":1095}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":139},"generated":{"line":1,"column":1128}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":177},"generated":{"line":1,"column":1167}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":203},"generated":{"line":1,"column":1194}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":234},"generated":{"line":1,"column":1226}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":267},"generated":{"line":1,"column":1260}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":297},"generated":{"line":1,"column":1291}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":40,"column":326},"generated":{"line":1,"column":1321}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":2},"generated":{"line":1,"column":1350}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":68},"generated":{"line":1,"column":1418}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":105},"generated":{"line":1,"column":1456}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":148},"generated":{"line":1,"column":1500}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":206},"generated":{"line":1,"column":1559}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":264},"generated":{"line":1,"column":1618}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":323},"generated":{"line":1,"column":1678}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":358},"generated":{"line":1,"column":1714}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":432},"generated":{"line":1,"column":1789}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":506},"generated":{"line":1,"column":1864}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":542},"generated":{"line":1,"column":1901}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":579},"generated":{"line":1,"column":1939}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":41,"column":650},"generated":{"line":1,"column":2011}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":42,"column":2},"generated":{"line":1,"column":2031}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":42,"column":50},"generated":{"line":1,"column":2082}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":43,"column":2},"generated":{"line":1,"column":2136}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":2},"generated":{"line":1,"column":2199}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":63},"generated":{"line":1,"column":2263}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":135},"generated":{"line":1,"column":2338}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":204},"generated":{"line":1,"column":2424}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":276},"generated":{"line":1,"column":2499}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":345},"generated":{"line":1,"column":2585}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":46,"column":417},"generated":{"line":1,"column":2660}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":47,"column":2},"generated":{"line":1,"column":2746}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":48,"column":2},"generated":{"line":1,"column":2803}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":48,"column":65},"generated":{"line":1,"column":2869}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":48,"column":90},"generated":{"line":1,"column":2897}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":49,"column":2},"generated":{"line":1,"column":2920}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":49,"column":70},"generated":{"line":1,"column":2991}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":2},"generated":{"line":1,"column":3034}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":33},"generated":{"line":1,"column":3068}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":87},"generated":{"line":1,"column":3127}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":123},"generated":{"line":1,"column":3166}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":177},"generated":{"line":1,"column":3225}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":211},"generated":{"line":1,"column":3262}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":229},"generated":{"line":1,"column":3285}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":236},"generated":{"line":1,"column":3293}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":273},"generated":{"line":1,"column":3331}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":348},"generated":{"line":1,"column":3409}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":396},"generated":{"line":1,"column":3460}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":403},"generated":{"line":1,"column":3468}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":441},"generated":{"line":1,"column":3507}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":499},"generated":{"line":1,"column":3568}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":550},"generated":{"line":1,"column":3622}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":557},"generated":{"line":1,"column":3630}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":632},"generated":{"line":1,"column":3706}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":661},"generated":{"line":1,"column":3738}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":53,"column":685},"generated":{"line":1,"column":3765}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":56,"column":2},"generated":{"line":1,"column":3797}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":56,"column":52},"generated":{"line":1,"column":3850}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":56,"column":81},"generated":{"line":1,"column":3884}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":57,"column":2},"generated":{"line":1,"column":3909}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":58,"column":2},"generated":{"line":1,"column":3949}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":58,"column":32},"generated":{"line":1,"column":3984}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":58,"column":58},"generated":{"line":1,"column":4017}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":58,"column":83},"generated":{"line":1,"column":4049}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":59,"column":2},"generated":{"line":1,"column":4065}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":59,"column":24},"generated":{"line":1,"column":4092}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":60,"column":2},"generated":{"line":1,"column":4104}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":60,"column":62},"generated":{"line":1,"column":4167}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":60,"column":114},"generated":{"line":1,"column":4222}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":60,"column":162},"generated":{"line":1,"column":4273}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":60,"column":210},"generated":{"line":1,"column":4326}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":60,"column":234},"generated":{"line":1,"column":4355}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":2},"generated":{"line":1,"column":4367}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":49},"generated":{"line":1,"column":4417}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":56},"generated":{"line":1,"column":4425}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":131},"generated":{"line":1,"column":4501}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":184},"generated":{"line":1,"column":4558}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":231},"generated":{"line":1,"column":4609}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":294},"generated":{"line":1,"column":4676}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":61,"column":323},"generated":{"line":1,"column":4708}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":64,"column":2},"generated":{"line":1,"column":4792}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":64,"column":52},"generated":{"line":1,"column":4845}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":64,"column":81},"generated":{"line":1,"column":4879}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":65,"column":2},"generated":{"line":1,"column":4904}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":65,"column":37},"generated":{"line":1,"column":4944}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":2},"generated":{"line":1,"column":4985}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":43},"generated":{"line":1,"column":5033}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":99},"generated":{"line":1,"column":5096}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":151},"generated":{"line":1,"column":5155}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":185},"generated":{"line":1,"column":5198}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":229},"generated":{"line":1,"column":5251}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":301},"generated":{"line":1,"column":5334}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":324},"generated":{"line":1,"column":5368}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":339},"generated":{"line":1,"column":5392}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":367},"generated":{"line":1,"column":5429}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":66,"column":380},"generated":{"line":1,"column":5449}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":67,"column":2},"generated":{"line":1,"column":5465}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":67,"column":24},"generated":{"line":1,"column":5492}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":67,"column":33},"generated":{"line":1,"column":5504}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":67,"column":40},"generated":{"line":1,"column":5512}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":67,"column":110},"generated":{"line":1,"column":5583}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":69,"column":2},"generated":{"line":1,"column":5591}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":2},"generated":{"line":1,"column":5631}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":17},"generated":{"line":1,"column":5649}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":42},"generated":{"line":1,"column":5677}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":97},"generated":{"line":1,"column":5735}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":152},"generated":{"line":1,"column":5793}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":179},"generated":{"line":1,"column":5823}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":219},"generated":{"line":1,"column":5866}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":274},"generated":{"line":1,"column":5924}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":329},"generated":{"line":1,"column":5982}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":356},"generated":{"line":1,"column":6012}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":396},"generated":{"line":1,"column":6055}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":451},"generated":{"line":1,"column":6113}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":506},"generated":{"line":1,"column":6171}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":533},"generated":{"line":1,"column":6201}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":573},"generated":{"line":1,"column":6244}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":70,"column":624},"generated":{"line":1,"column":6298}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":71,"column":2},"generated":{"line":1,"column":6326}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":71,"column":49},"generated":{"line":1,"column":6376}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":72,"column":2},"generated":{"line":1,"column":6456}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":72,"column":56},"generated":{"line":1,"column":6513}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":72,"column":110},"generated":{"line":1,"column":6570}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":73,"column":2},"generated":{"line":1,"column":6628}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":73,"column":33},"generated":{"line":1,"column":6662}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":74,"column":2},"generated":{"line":1,"column":6674}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":74,"column":57},"generated":{"line":1,"column":6735}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":74,"column":113},"generated":{"line":1,"column":6796}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":75,"column":2},"generated":{"line":1,"column":6851}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":75,"column":59},"generated":{"line":1,"column":6913}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":75,"column":111},"generated":{"line":1,"column":6970}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":76,"column":2},"generated":{"line":1,"column":7042}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":77,"column":2},"generated":{"line":1,"column":7084}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":77,"column":83},"generated":{"line":1,"column":7172}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":77,"column":130},"generated":{"line":1,"column":7225}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":77,"column":196},"generated":{"line":1,"column":7296}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":2},"generated":{"line":1,"column":7308}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":27},"generated":{"line":1,"column":7336}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":68},"generated":{"line":1,"column":7380}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":147},"generated":{"line":1,"column":7462}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":179},"generated":{"line":1,"column":7497}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":206},"generated":{"line":1,"column":7527}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","name":"join","original":{"line":78,"column":213},"generated":{"line":1,"column":7536}},{"source":"node_modules/three-stdlib/shaders/VolumeShader.js","original":{"line":78,"column":218},"generated":{"line":1,"column":7541}}],"sources":{"node_modules/three-stdlib/shaders/VolumeShader.js":"import { Vector3, Vector2 } from 'three';\n\n/**\n * Shaders to render 3D volumes using raycasting.\n * The applied techniques are based on similar implementations in the Visvis and Vispy projects.\n * This is not the only approach, therefore it's marked 1.\n */\n\nconst VolumeRenderShader1 = {\n  uniforms: {\n    u_size: {\n      value: new Vector3(1, 1, 1)\n    },\n    u_renderstyle: {\n      value: 0\n    },\n    u_renderthreshold: {\n      value: 0.5\n    },\n    u_clim: {\n      value: new Vector2(1, 1)\n    },\n    u_data: {\n      value: null\n    },\n    u_cmdata: {\n      value: null\n    }\n  },\n  vertexShader: ['\t\tvarying vec4 v_nearpos;', '\t\tvarying vec4 v_farpos;', '\t\tvarying vec3 v_position;', '\t\tvoid main() {', // Prepare transforms to map to \"camera view\". See also:\n  // https://threejs.org/docs/#api/renderers/webgl/WebGLProgram\n  '\t\t\t\tmat4 viewtransformf = modelViewMatrix;', '\t\t\t\tmat4 viewtransformi = inverse(modelViewMatrix);', // Project local vertex coordinate to camera position. Then do a step\n  // backward (in cam coords) to the near clipping plane, and project back. Do\n  // the same for the far clipping plane. This gives us all the information we\n  // need to calculate the ray and truncate it to the viewing cone.\n  '\t\t\t\tvec4 position4 = vec4(position, 1.0);', '\t\t\t\tvec4 pos_in_cam = viewtransformf * position4;', // Intersection of ray and near clipping plane (z = -1 in clip coords)\n  '\t\t\t\tpos_in_cam.z = -pos_in_cam.w;', '\t\t\t\tv_nearpos = viewtransformi * pos_in_cam;', // Intersection of ray and far clipping plane (z = +1 in clip coords)\n  '\t\t\t\tpos_in_cam.z = pos_in_cam.w;', '\t\t\t\tv_farpos = viewtransformi * pos_in_cam;', // Set varyings and output pos\n  '\t\t\t\tv_position = position;', '\t\t\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;', '\t\t}'].join('\\n'),\n  fragmentShader: ['\t\tprecision highp float;', '\t\tprecision mediump sampler3D;', '\t\tuniform vec3 u_size;', '\t\tuniform int u_renderstyle;', '\t\tuniform float u_renderthreshold;', '\t\tuniform vec2 u_clim;', '\t\tuniform sampler3D u_data;', '\t\tuniform sampler2D u_cmdata;', '\t\tvarying vec3 v_position;', '\t\tvarying vec4 v_nearpos;', '\t\tvarying vec4 v_farpos;', // The maximum distance through our rendering volume is sqrt(3).\n  '\t\tconst int MAX_STEPS = 887;\t// 887 for 512^3, 1774 for 1024^3', '\t\tconst int REFINEMENT_STEPS = 4;', '\t\tconst float relative_step_size = 1.0;', '\t\tconst vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);', '\t\tconst vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);', '\t\tconst vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);', '\t\tconst float shininess = 40.0;', '\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);', '\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);', '\t\tfloat sample1(vec3 texcoords);', '\t\tvec4 apply_colormap(float val);', '\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);', '\t\tvoid main() {', // Normalize clipping plane info\n  '\t\t\t\tvec3 farpos = v_farpos.xyz / v_farpos.w;', '\t\t\t\tvec3 nearpos = v_nearpos.xyz / v_nearpos.w;', // Calculate unit vector pointing in the view direction through this fragment.\n  '\t\t\t\tvec3 view_ray = normalize(nearpos.xyz - farpos.xyz);', // Compute the (negative) distance to the front surface or near clipping plane.\n  // v_position is the back face of the cuboid, so the initial distance calculated in the dot\n  // product below is the distance from near clip plane to the back of the cuboid\n  '\t\t\t\tfloat distance = dot(nearpos - v_position, view_ray);', '\t\t\t\tdistance = max(distance, min((-0.5 - v_position.x) / view_ray.x,', '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.x - 0.5 - v_position.x) / view_ray.x));', '\t\t\t\tdistance = max(distance, min((-0.5 - v_position.y) / view_ray.y,', '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.y - 0.5 - v_position.y) / view_ray.y));', '\t\t\t\tdistance = max(distance, min((-0.5 - v_position.z) / view_ray.z,', '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.z - 0.5 - v_position.z) / view_ray.z));', // Now we have the starting position on the front surface\n  '\t\t\t\tvec3 front = v_position + view_ray * distance;', // Decide how many steps to take\n  '\t\t\t\tint nsteps = int(-distance / relative_step_size + 0.5);', '\t\t\t\tif ( nsteps < 1 )', '\t\t\t\t\t\tdiscard;', // Get starting location and step vector in texture coordinates\n  '\t\t\t\tvec3 step = ((v_position - front) / u_size) / float(nsteps);', '\t\t\t\tvec3 start_loc = front / u_size;', // For testing: show the number of steps. This helps to establish\n  // whether the rays are correctly oriented\n  //'gl_FragColor = vec4(0.0, float(nsteps) / 1.0 / u_size.x, 1.0, 1.0);',\n  //'return;',\n  '\t\t\t\tif (u_renderstyle == 0)', '\t\t\t\t\t\tcast_mip(start_loc, step, nsteps, view_ray);', '\t\t\t\telse if (u_renderstyle == 1)', '\t\t\t\t\t\tcast_iso(start_loc, step, nsteps, view_ray);', '\t\t\t\tif (gl_FragColor.a < 0.05)', '\t\t\t\t\t\tdiscard;', '\t\t}', '\t\tfloat sample1(vec3 texcoords) {', '\t\t\t\t/* Sample float value from a 3D texture. Assumes intensity data. */', '\t\t\t\treturn texture(u_data, texcoords.xyz).r;', '\t\t}', '\t\tvec4 apply_colormap(float val) {', '\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);', '\t\t\t\treturn texture2D(u_cmdata, vec2(val, 0.5));', '\t\t}', '\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {', '\t\t\t\tfloat max_val = -1e6;', '\t\t\t\tint max_i = 100;', '\t\t\t\tvec3 loc = start_loc;', // Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n  // non-constant expression. So we use a hard-coded max, and an additional condition\n  // inside the loop.\n  '\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {', '\t\t\t\t\t\tif (iter >= nsteps)', '\t\t\t\t\t\t\t\tbreak;', // Sample from the 3D texture\n  '\t\t\t\t\t\tfloat val = sample1(loc);', // Apply MIP operation\n  '\t\t\t\t\t\tif (val > max_val) {', '\t\t\t\t\t\t\t\tmax_val = val;', '\t\t\t\t\t\t\t\tmax_i = iter;', '\t\t\t\t\t\t}', // Advance location deeper into the volume\n  '\t\t\t\t\t\tloc += step;', '\t\t\t\t}', // Refine location, gives crispier images\n  '\t\t\t\tvec3 iloc = start_loc + step * (float(max_i) - 0.5);', '\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);', '\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {', '\t\t\t\t\t\tmax_val = max(max_val, sample1(iloc));', '\t\t\t\t\t\tiloc += istep;', '\t\t\t\t}', // Resolve final color\n  '\t\t\t\tgl_FragColor = apply_colormap(max_val);', '\t\t}', '\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {', '\t\t\t\tgl_FragColor = vec4(0.0);\t// init transparent', '\t\t\t\tvec4 color3 = vec4(0.0);\t// final color', '\t\t\t\tvec3 dstep = 1.5 / u_size;\t// step to sample derivative', '\t\t\t\tvec3 loc = start_loc;', '\t\t\t\tfloat low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);', // Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n  // non-constant expression. So we use a hard-coded max, and an additional condition\n  // inside the loop.\n  '\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {', '\t\t\t\t\t\tif (iter >= nsteps)', '\t\t\t\t\t\t\t\tbreak;', // Sample from the 3D texture\n  '\t\t\t\t\t\tfloat val = sample1(loc);', '\t\t\t\t\t\tif (val > low_threshold) {', // Take the last interval in smaller steps\n  '\t\t\t\t\t\t\t\tvec3 iloc = loc - 0.5 * step;', '\t\t\t\t\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);', '\t\t\t\t\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {', '\t\t\t\t\t\t\t\t\t\tval = sample1(iloc);', '\t\t\t\t\t\t\t\t\t\tif (val > u_renderthreshold) {', '\t\t\t\t\t\t\t\t\t\t\t\tgl_FragColor = add_lighting(val, iloc, dstep, view_ray);', '\t\t\t\t\t\t\t\t\t\t\t\treturn;', '\t\t\t\t\t\t\t\t\t\t}', '\t\t\t\t\t\t\t\t\t\tiloc += istep;', '\t\t\t\t\t\t\t\t}', '\t\t\t\t\t\t}', // Advance location deeper into the volume\n  '\t\t\t\t\t\tloc += step;', '\t\t\t\t}', '\t\t}', '\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)', '\t\t{', // Calculate color by incorporating lighting\n  // View direction\n  '\t\t\t\tvec3 V = normalize(view_ray);', // calculate normal vector from gradient\n  '\t\t\t\tvec3 N;', '\t\t\t\tfloat val1, val2;', '\t\t\t\tval1 = sample1(loc + vec3(-step[0], 0.0, 0.0));', '\t\t\t\tval2 = sample1(loc + vec3(+step[0], 0.0, 0.0));', '\t\t\t\tN[0] = val1 - val2;', '\t\t\t\tval = max(max(val1, val2), val);', '\t\t\t\tval1 = sample1(loc + vec3(0.0, -step[1], 0.0));', '\t\t\t\tval2 = sample1(loc + vec3(0.0, +step[1], 0.0));', '\t\t\t\tN[1] = val1 - val2;', '\t\t\t\tval = max(max(val1, val2), val);', '\t\t\t\tval1 = sample1(loc + vec3(0.0, 0.0, -step[2]));', '\t\t\t\tval2 = sample1(loc + vec3(0.0, 0.0, +step[2]));', '\t\t\t\tN[2] = val1 - val2;', '\t\t\t\tval = max(max(val1, val2), val);', '\t\t\t\tfloat gm = length(N); // gradient magnitude', '\t\t\t\tN = normalize(N);', // Flip normal so it points towards viewer\n  '\t\t\t\tfloat Nselect = float(dot(N, V) > 0.0);', '\t\t\t\tN = (2.0 * Nselect - 1.0) * N;\t// ==\tNselect * N - (1.0-Nselect)*N;', // Init colors\n  '\t\t\t\tvec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);', '\t\t\t\tvec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);', '\t\t\t\tvec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);', // note: could allow multiple lights\n  '\t\t\t\tfor (int i=0; i<1; i++)', '\t\t\t\t{', // Get light direction (make sure to prevent zero devision)\n  '\t\t\t\t\t\tvec3 L = normalize(view_ray);\t//lightDirs[i];', '\t\t\t\t\t\tfloat lightEnabled = float( length(L) > 0.0 );', '\t\t\t\t\t\tL = normalize(L + (1.0 - lightEnabled));', // Calculate lighting properties\n  '\t\t\t\t\t\tfloat lambertTerm = clamp(dot(N, L), 0.0, 1.0);', '\t\t\t\t\t\tvec3 H = normalize(L+V); // Halfway vector', '\t\t\t\t\t\tfloat specularTerm = pow(max(dot(H, N), 0.0), shininess);', // Calculate mask\n  '\t\t\t\t\t\tfloat mask1 = lightEnabled;', // Calculate colors\n  '\t\t\t\t\t\tambient_color +=\tmask1 * ambient_color;\t// * gl_LightSource[i].ambient;', '\t\t\t\t\t\tdiffuse_color +=\tmask1 * lambertTerm;', '\t\t\t\t\t\tspecular_color += mask1 * specularTerm * specular_color;', '\t\t\t\t}', // Calculate final color by componing different components\n  '\t\t\t\tvec4 final_color;', '\t\t\t\tvec4 color = apply_colormap(val);', '\t\t\t\tfinal_color = color * (ambient_color + diffuse_color) + specular_color;', '\t\t\t\tfinal_color.a = color.a;', '\t\t\t\treturn final_color;', '\t\t}'].join('\\n')\n};\n\nexport { VolumeRenderShader1 };\n"},"lineCount":null}},"error":null,"hash":"53602fe74f7ba2561ec1546b64bc6581","cacheData":{"env":{}}}