{"id":"EKfs","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.FilmShader=void 0;const e=exports.FilmShader={uniforms:{tDiffuse:{value:null},time:{value:0},nIntensity:{value:.5},sIntensity:{value:.05},sCount:{value:4096},grayscale:{value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"\\tvUv = uv;\",\"\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"#include <common>\",\"uniform float time;\",\"uniform bool grayscale;\",\"uniform float nIntensity;\",\"uniform float sIntensity;\",\"uniform float sCount;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"\\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\"\\tfloat dx = rand( vUv + time );\",\"\\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\"\\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\"\\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\"\\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\"\\tif( grayscale ) {\",\"\\t\\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\"\\t}\",\"\\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\",\"}\"].join(\"\\n\")};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":54,"column":1},"generated":{"line":1,"column":92}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":20,"column":0},"generated":{"line":1,"column":94}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"FilmShader","original":{"line":20,"column":6},"generated":{"line":1,"column":100}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"exports","original":{"line":20,"column":16},"generated":{"line":1,"column":102}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"FilmShader","original":{"line":20,"column":16},"generated":{"line":1,"column":110}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":20,"column":19},"generated":{"line":1,"column":121}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"uniforms","original":{"line":21,"column":2},"generated":{"line":1,"column":122}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":21,"column":12},"generated":{"line":1,"column":131}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"tDiffuse","original":{"line":22,"column":4},"generated":{"line":1,"column":132}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":22,"column":14},"generated":{"line":1,"column":141}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"value","original":{"line":23,"column":6},"generated":{"line":1,"column":142}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":23,"column":13},"generated":{"line":1,"column":148}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"time","original":{"line":25,"column":4},"generated":{"line":1,"column":154}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":25,"column":10},"generated":{"line":1,"column":159}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"value","original":{"line":26,"column":6},"generated":{"line":1,"column":160}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":26,"column":13},"generated":{"line":1,"column":166}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"nIntensity","original":{"line":28,"column":4},"generated":{"line":1,"column":169}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":28,"column":16},"generated":{"line":1,"column":180}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"value","original":{"line":29,"column":6},"generated":{"line":1,"column":181}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":29,"column":13},"generated":{"line":1,"column":187}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"sIntensity","original":{"line":31,"column":4},"generated":{"line":1,"column":191}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":31,"column":16},"generated":{"line":1,"column":202}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"value","original":{"line":32,"column":6},"generated":{"line":1,"column":203}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":32,"column":13},"generated":{"line":1,"column":209}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"sCount","original":{"line":34,"column":4},"generated":{"line":1,"column":214}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":34,"column":12},"generated":{"line":1,"column":221}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"value","original":{"line":35,"column":6},"generated":{"line":1,"column":222}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":35,"column":13},"generated":{"line":1,"column":228}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"grayscale","original":{"line":37,"column":4},"generated":{"line":1,"column":234}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":37,"column":15},"generated":{"line":1,"column":244}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"value","original":{"line":38,"column":6},"generated":{"line":1,"column":245}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":38,"column":13},"generated":{"line":1,"column":251}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"vertexShader","original":{"line":41,"column":2},"generated":{"line":1,"column":255}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":16},"generated":{"line":1,"column":268}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":17},"generated":{"line":1,"column":269}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":38},"generated":{"line":1,"column":289}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":55},"generated":{"line":1,"column":305}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":69},"generated":{"line":1,"column":319}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":147},"generated":{"line":1,"column":397}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"join","original":{"line":41,"column":152},"generated":{"line":1,"column":402}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":41,"column":157},"generated":{"line":1,"column":407}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"fragmentShader","original":{"line":42,"column":2},"generated":{"line":1,"column":413}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":42,"column":18},"generated":{"line":1,"column":428}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":42,"column":19},"generated":{"line":1,"column":429}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":43,"column":2},"generated":{"line":1,"column":449}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":43,"column":25},"generated":{"line":1,"column":471}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":44,"column":2},"generated":{"line":1,"column":497}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":45,"column":2},"generated":{"line":1,"column":525}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":46,"column":2},"generated":{"line":1,"column":553}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":46,"column":27},"generated":{"line":1,"column":577}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":46,"column":58},"generated":{"line":1,"column":607}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":46,"column":79},"generated":{"line":1,"column":627}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":47,"column":2},"generated":{"line":1,"column":643}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":48,"column":2},"generated":{"line":1,"column":697}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":49,"column":2},"generated":{"line":1,"column":732}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":50,"column":2},"generated":{"line":1,"column":822}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":51,"column":2},"generated":{"line":1,"column":890}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":52,"column":2},"generated":{"line":1,"column":965}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":53,"column":2},"generated":{"line":1,"column":1065}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":53,"column":24},"generated":{"line":1,"column":1087}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":53,"column":102},"generated":{"line":1,"column":1166}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":53,"column":108},"generated":{"line":1,"column":1172}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":53,"column":163},"generated":{"line":1,"column":1227}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","name":"join","original":{"line":53,"column":168},"generated":{"line":1,"column":1232}},{"source":"node_modules/three-stdlib/shaders/FilmShader.js","original":{"line":53,"column":173},"generated":{"line":1,"column":1237}}],"sources":{"node_modules/three-stdlib/shaders/FilmShader.js":"/**\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\nconst FilmShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    time: {\n      value: 0.0\n    },\n    nIntensity: {\n      value: 0.5\n    },\n    sIntensity: {\n      value: 0.05\n    },\n    sCount: {\n      value: 4096\n    },\n    grayscale: {\n      value: 1\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', // control parameter\n  'uniform float time;', 'uniform bool grayscale;', // noise effect intensity value (0 = no effect, 1 = full effect)\n  'uniform float nIntensity;', // scanlines effect intensity value (0 = no effect, 1 = full effect)\n  'uniform float sIntensity;', // scanlines effect count value (0 = no effect, 4096 = full effect)\n  'uniform float sCount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', // sample the source\n  '\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );', // make some noise\n  '\tfloat dx = rand( vUv + time );', // add noise\n  '\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );', // get us a sine and cosine\n  '\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );', // add scanlines\n  '\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;', // interpolate between source and result by intensity\n  '\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );', // convert to grayscale if desired\n  '\tif( grayscale ) {', '\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );', '\t}', '\tgl_FragColor =  vec4( cResult, cTextureScreen.a );', '}'].join('\\n')\n};\n\nexport { FilmShader };\n"},"lineCount":null}},"error":null,"hash":"6a93c99f708e9d38d7571cc7b0b23aad","cacheData":{"env":{}}}