{"id":"vTvl","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988},{"name":"three","loc":{"line":1,"column":79,"index":79},"parent":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/lines/LineMaterial.js","resolved":"/home/moh/Desktop/MYPortfolio/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.LineMaterial=void 0;var t=require(\"three\");t.UniformsLib.line={worldUnits:{value:1},linewidth:{value:1},resolution:{value:new t.Vector2(1,1)},dashOffset:{value:0},dashScale:{value:1},dashSize:{value:1},gapSize:{value:1}},t.ShaderLib.line={uniforms:t.UniformsUtils.merge([t.UniformsLib.common,t.UniformsLib.fog,t.UniformsLib.line]),vertexShader:\"\\n\\t\\t#include <common>\\n\\t\\t#include <color_pars_vertex>\\n\\t\\t#include <fog_pars_vertex>\\n\\t\\t#include <logdepthbuf_pars_vertex>\\n\\t\\t#include <clipping_planes_pars_vertex>\\n\\n\\t\\tuniform float linewidth;\\n\\t\\tuniform vec2 resolution;\\n\\n\\t\\tattribute vec3 instanceStart;\\n\\t\\tattribute vec3 instanceEnd;\\n\\n\\t\\tattribute vec3 instanceColorStart;\\n\\t\\tattribute vec3 instanceColorEnd;\\n\\n\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\tvarying vec4 worldPos;\\n\\t\\t\\tvarying vec3 worldStart;\\n\\t\\t\\tvarying vec3 worldEnd;\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t#endif\\n\\n\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\tuniform float dashScale;\\n\\t\\t\\tattribute float instanceDistanceStart;\\n\\t\\t\\tattribute float instanceDistanceEnd;\\n\\t\\t\\tvarying float vLineDistance;\\n\\n\\t\\t#endif\\n\\n\\t\\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\\n\\n\\t\\t\\t// trim end segment so it terminates between the camera plane and the near plane\\n\\n\\t\\t\\t// conservative estimate of the near plane\\n\\t\\t\\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\\n\\t\\t\\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\\n\\t\\t\\tfloat nearEstimate = - 0.5 * b / a;\\n\\n\\t\\t\\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\\n\\n\\t\\t\\tend.xyz = mix( start.xyz, end.xyz, alpha );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#ifdef USE_COLOR\\n\\n\\t\\t\\t\\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\\n\\t\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tfloat aspect = resolution.x / resolution.y;\\n\\n\\t\\t\\t// camera space\\n\\t\\t\\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\\n\\t\\t\\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\\n\\n\\t\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\t\\tworldStart = start.xyz;\\n\\t\\t\\t\\tworldEnd = end.xyz;\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\\n\\t\\t\\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\\n\\t\\t\\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\\n\\t\\t\\t// perhaps there is a more elegant solution -- WestLangley\\n\\n\\t\\t\\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\\n\\n\\t\\t\\tif ( perspective ) {\\n\\n\\t\\t\\t\\tif ( start.z < 0.0 && end.z >= 0.0 ) {\\n\\n\\t\\t\\t\\t\\ttrimSegment( start, end );\\n\\n\\t\\t\\t\\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\\n\\n\\t\\t\\t\\t\\ttrimSegment( end, start );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// clip space\\n\\t\\t\\tvec4 clipStart = projectionMatrix * start;\\n\\t\\t\\tvec4 clipEnd = projectionMatrix * end;\\n\\n\\t\\t\\t// ndc space\\n\\t\\t\\tvec3 ndcStart = clipStart.xyz / clipStart.w;\\n\\t\\t\\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\\n\\n\\t\\t\\t// direction\\n\\t\\t\\tvec2 dir = ndcEnd.xy - ndcStart.xy;\\n\\n\\t\\t\\t// account for clip-space aspect ratio\\n\\t\\t\\tdir.x *= aspect;\\n\\t\\t\\tdir = normalize( dir );\\n\\n\\t\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\t\\t// get the offset direction as perpendicular to the view vector\\n\\t\\t\\t\\tvec3 worldDir = normalize( end.xyz - start.xyz );\\n\\t\\t\\t\\tvec3 offset;\\n\\t\\t\\t\\tif ( position.y < 0.5 ) {\\n\\n\\t\\t\\t\\t\\toffset = normalize( cross( start.xyz, worldDir ) );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\toffset = normalize( cross( end.xyz, worldDir ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// sign flip\\n\\t\\t\\t\\tif ( position.x < 0.0 ) offset *= - 1.0;\\n\\n\\t\\t\\t\\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\\n\\n\\t\\t\\t\\t// don't extend the line if we're rendering dashes because we\\n\\t\\t\\t\\t// won't be rendering the endcaps\\n\\t\\t\\t\\t#ifndef USE_DASH\\n\\n\\t\\t\\t\\t\\t// extend the line bounds to encompass  endcaps\\n\\t\\t\\t\\t\\tstart.xyz += - worldDir * linewidth * 0.5;\\n\\t\\t\\t\\t\\tend.xyz += worldDir * linewidth * 0.5;\\n\\n\\t\\t\\t\\t\\t// shift the position of the quad so it hugs the forward edge of the line\\n\\t\\t\\t\\t\\toffset.xy -= dir * forwardOffset;\\n\\t\\t\\t\\t\\toffset.z += 0.5;\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t// endcaps\\n\\t\\t\\t\\tif ( position.y > 1.0 || position.y < 0.0 ) {\\n\\n\\t\\t\\t\\t\\toffset.xy += dir * 2.0 * forwardOffset;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// adjust for linewidth\\n\\t\\t\\t\\toffset *= linewidth * 0.5;\\n\\n\\t\\t\\t\\t// set the world position\\n\\t\\t\\t\\tworldPos = ( position.y < 0.5 ) ? start : end;\\n\\t\\t\\t\\tworldPos.xyz += offset;\\n\\n\\t\\t\\t\\t// project the worldpos\\n\\t\\t\\t\\tvec4 clip = projectionMatrix * worldPos;\\n\\n\\t\\t\\t\\t// shift the depth of the projected points so the line\\n\\t\\t\\t\\t// segments overlap neatly\\n\\t\\t\\t\\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\\n\\t\\t\\t\\tclip.z = clipPose.z * clip.w;\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec2 offset = vec2( dir.y, - dir.x );\\n\\t\\t\\t\\t// undo aspect ratio adjustment\\n\\t\\t\\t\\tdir.x /= aspect;\\n\\t\\t\\t\\toffset.x /= aspect;\\n\\n\\t\\t\\t\\t// sign flip\\n\\t\\t\\t\\tif ( position.x < 0.0 ) offset *= - 1.0;\\n\\n\\t\\t\\t\\t// endcaps\\n\\t\\t\\t\\tif ( position.y < 0.0 ) {\\n\\n\\t\\t\\t\\t\\toffset += - dir;\\n\\n\\t\\t\\t\\t} else if ( position.y > 1.0 ) {\\n\\n\\t\\t\\t\\t\\toffset += dir;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// adjust for linewidth\\n\\t\\t\\t\\toffset *= linewidth;\\n\\n\\t\\t\\t\\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\\n\\t\\t\\t\\toffset /= resolution.y;\\n\\n\\t\\t\\t\\t// select end\\n\\t\\t\\t\\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\\n\\n\\t\\t\\t\\t// back to clip space\\n\\t\\t\\t\\toffset *= clip.w;\\n\\n\\t\\t\\t\\tclip.xy += offset;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tgl_Position = clip;\\n\\n\\t\\t\\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\\n\\n\\t\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t\\t#include <clipping_planes_vertex>\\n\\t\\t\\t#include <fog_vertex>\\n\\n\\t\\t}\\n\\t\\t\",fragmentShader:\"\\n\\t\\tuniform vec3 diffuse;\\n\\t\\tuniform float opacity;\\n\\t\\tuniform float linewidth;\\n\\n\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\tuniform float dashOffset;\\n\\t\\t\\tuniform float dashSize;\\n\\t\\t\\tuniform float gapSize;\\n\\n\\t\\t#endif\\n\\n\\t\\tvarying float vLineDistance;\\n\\n\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\tvarying vec4 worldPos;\\n\\t\\t\\tvarying vec3 worldStart;\\n\\t\\t\\tvarying vec3 worldEnd;\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t#endif\\n\\n\\t\\t#include <common>\\n\\t\\t#include <color_pars_fragment>\\n\\t\\t#include <fog_pars_fragment>\\n\\t\\t#include <logdepthbuf_pars_fragment>\\n\\t\\t#include <clipping_planes_pars_fragment>\\n\\n\\t\\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\\n\\n\\t\\t\\tfloat mua;\\n\\t\\t\\tfloat mub;\\n\\n\\t\\t\\tvec3 p13 = p1 - p3;\\n\\t\\t\\tvec3 p43 = p4 - p3;\\n\\n\\t\\t\\tvec3 p21 = p2 - p1;\\n\\n\\t\\t\\tfloat d1343 = dot( p13, p43 );\\n\\t\\t\\tfloat d4321 = dot( p43, p21 );\\n\\t\\t\\tfloat d1321 = dot( p13, p21 );\\n\\t\\t\\tfloat d4343 = dot( p43, p43 );\\n\\t\\t\\tfloat d2121 = dot( p21, p21 );\\n\\n\\t\\t\\tfloat denom = d2121 * d4343 - d4321 * d4321;\\n\\n\\t\\t\\tfloat numer = d1343 * d4321 - d1321 * d4343;\\n\\n\\t\\t\\tmua = numer / denom;\\n\\t\\t\\tmua = clamp( mua, 0.0, 1.0 );\\n\\t\\t\\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\\n\\t\\t\\tmub = clamp( mub, 0.0, 1.0 );\\n\\n\\t\\t\\treturn vec2( mua, mub );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#include <clipping_planes_fragment>\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\\n\\n\\t\\t\\t\\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tfloat alpha = opacity;\\n\\n\\t\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\t\\t// Find the closest points on the view ray and the line segment\\n\\t\\t\\t\\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\\n\\t\\t\\t\\tvec3 lineDir = worldEnd - worldStart;\\n\\t\\t\\t\\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\\n\\n\\t\\t\\t\\tvec3 p1 = worldStart + lineDir * params.x;\\n\\t\\t\\t\\tvec3 p2 = rayEnd * params.y;\\n\\t\\t\\t\\tvec3 delta = p1 - p2;\\n\\t\\t\\t\\tfloat len = length( delta );\\n\\t\\t\\t\\tfloat norm = len / linewidth;\\n\\n\\t\\t\\t\\t#ifndef USE_DASH\\n\\n\\t\\t\\t\\t\\t#ifdef USE_ALPHA_TO_COVERAGE\\n\\n\\t\\t\\t\\t\\t\\tfloat dnorm = fwidth( norm );\\n\\t\\t\\t\\t\\t\\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\\n\\n\\t\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\t\\tif ( norm > 0.5 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdiscard;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\t#ifdef USE_ALPHA_TO_COVERAGE\\n\\n\\t\\t\\t\\t\\t// artifacts appear on some hardware if a derivative is taken within a conditional\\n\\t\\t\\t\\t\\tfloat a = vUv.x;\\n\\t\\t\\t\\t\\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\\n\\t\\t\\t\\t\\tfloat len2 = a * a + b * b;\\n\\t\\t\\t\\t\\tfloat dlen = fwidth( len2 );\\n\\n\\t\\t\\t\\t\\tif ( abs( vUv.y ) > 1.0 ) {\\n\\n\\t\\t\\t\\t\\t\\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\tif ( abs( vUv.y ) > 1.0 ) {\\n\\n\\t\\t\\t\\t\\t\\tfloat a = vUv.x;\\n\\t\\t\\t\\t\\t\\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\\n\\t\\t\\t\\t\\t\\tfloat len2 = a * a + b * b;\\n\\n\\t\\t\\t\\t\\t\\tif ( len2 > 1.0 ) discard;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tvec4 diffuseColor = vec4( diffuse, alpha );\\n\\n\\t\\t\\t#include <logdepthbuf_fragment>\\n\\t\\t\\t#include <color_fragment>\\n\\n\\t\\t\\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\\n\\n\\t\\t\\t#include <tonemapping_fragment>\\n\\t\\t\\t#include <encodings_fragment>\\n\\t\\t\\t#include <fog_fragment>\\n\\t\\t\\t#include <premultiplied_alpha_fragment>\\n\\n\\t\\t}\\n\\t\\t\"};class n extends t.ShaderMaterial{constructor(n){super({type:\"LineMaterial\",uniforms:t.UniformsUtils.clone(t.ShaderLib.line.uniforms),vertexShader:t.ShaderLib.line.vertexShader,fragmentShader:t.ShaderLib.line.fragmentShader,clipping:!0}),this.isLineMaterial=!0,Object.defineProperties(this,{color:{enumerable:!0,get:function(){return this.uniforms.diffuse.value},set:function(t){this.uniforms.diffuse.value=t}},worldUnits:{enumerable:!0,get:function(){return\"WORLD_UNITS\"in this.defines},set:function(t){!0===t?this.defines.WORLD_UNITS=\"\":delete this.defines.WORLD_UNITS}},linewidth:{enumerable:!0,get:function(){return this.uniforms.linewidth.value},set:function(t){this.uniforms.linewidth.value=t}},dashed:{enumerable:!0,get:function(){return Boolean(\"USE_DASH\"in this.defines)},set(t){Boolean(t)!==Boolean(\"USE_DASH\"in this.defines)&&(this.needsUpdate=!0),!0===t?this.defines.USE_DASH=\"\":delete this.defines.USE_DASH}},dashScale:{enumerable:!0,get:function(){return this.uniforms.dashScale.value},set:function(t){this.uniforms.dashScale.value=t}},dashSize:{enumerable:!0,get:function(){return this.uniforms.dashSize.value},set:function(t){this.uniforms.dashSize.value=t}},dashOffset:{enumerable:!0,get:function(){return this.uniforms.dashOffset.value},set:function(t){this.uniforms.dashOffset.value=t}},gapSize:{enumerable:!0,get:function(){return this.uniforms.gapSize.value},set:function(t){this.uniforms.gapSize.value=t}},opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(t){this.uniforms.opacity.value=t}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(t){this.uniforms.resolution.value.copy(t)}},alphaToCoverage:{enumerable:!0,get:function(){return Boolean(\"USE_ALPHA_TO_COVERAGE\"in this.defines)},set:function(t){Boolean(t)!==Boolean(\"USE_ALPHA_TO_COVERAGE\"in this.defines)&&(this.needsUpdate=!0),!0===t?(this.defines.USE_ALPHA_TO_COVERAGE=\"\",this.extensions.derivatives=!0):(delete this.defines.USE_ALPHA_TO_COVERAGE,this.extensions.derivatives=!1)}}}),this.setValues(n)}}exports.LineMaterial=n;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":575,"column":1},"generated":{"line":1,"column":94}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":1,"column":0},"generated":{"line":1,"column":96}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"_three","original":{"line":1,"column":0},"generated":{"line":1,"column":100}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"require","original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":1,"column":0},"generated":{"line":1,"column":110}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"UniformsLib","original":{"line":15,"column":0},"generated":{"line":1,"column":119}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":15,"column":11},"generated":{"line":1,"column":121}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"line","original":{"line":15,"column":12},"generated":{"line":1,"column":133}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":15,"column":19},"generated":{"line":1,"column":138}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"worldUnits","original":{"line":16,"column":2},"generated":{"line":1,"column":139}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":16,"column":14},"generated":{"line":1,"column":150}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":17,"column":4},"generated":{"line":1,"column":151}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":17,"column":11},"generated":{"line":1,"column":157}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"linewidth","original":{"line":19,"column":2},"generated":{"line":1,"column":160}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":19,"column":13},"generated":{"line":1,"column":170}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":20,"column":4},"generated":{"line":1,"column":171}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":20,"column":11},"generated":{"line":1,"column":177}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"resolution","original":{"line":22,"column":2},"generated":{"line":1,"column":180}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":22,"column":14},"generated":{"line":1,"column":191}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":23,"column":4},"generated":{"line":1,"column":192}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":23,"column":11},"generated":{"line":1,"column":198}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Vector2","original":{"line":23,"column":15},"generated":{"line":1,"column":202}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":23,"column":22},"generated":{"line":1,"column":204}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":23,"column":23},"generated":{"line":1,"column":212}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":23,"column":26},"generated":{"line":1,"column":214}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashOffset","original":{"line":25,"column":2},"generated":{"line":1,"column":218}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":25,"column":14},"generated":{"line":1,"column":229}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":26,"column":4},"generated":{"line":1,"column":230}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":26,"column":11},"generated":{"line":1,"column":236}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashScale","original":{"line":28,"column":2},"generated":{"line":1,"column":239}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":28,"column":13},"generated":{"line":1,"column":249}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":29,"column":4},"generated":{"line":1,"column":250}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":29,"column":11},"generated":{"line":1,"column":256}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashSize","original":{"line":31,"column":2},"generated":{"line":1,"column":259}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":31,"column":12},"generated":{"line":1,"column":268}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":32,"column":4},"generated":{"line":1,"column":269}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":32,"column":11},"generated":{"line":1,"column":275}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"gapSize","original":{"line":34,"column":2},"generated":{"line":1,"column":278}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":34,"column":11},"generated":{"line":1,"column":286}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":35,"column":4},"generated":{"line":1,"column":287}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":35,"column":11},"generated":{"line":1,"column":293}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"ShaderLib","original":{"line":39,"column":0},"generated":{"line":1,"column":297}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":39,"column":9},"generated":{"line":1,"column":299}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":39,"column":16},"generated":{"line":1,"column":309}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":39,"column":20},"generated":{"line":1,"column":314}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":40,"column":2},"generated":{"line":1,"column":315}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"UniformsUtils","original":{"line":40,"column":12},"generated":{"line":1,"column":324}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":40,"column":25},"generated":{"line":1,"column":326}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"merge","original":{"line":40,"column":26},"generated":{"line":1,"column":340}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":40,"column":32},"generated":{"line":1,"column":346}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"UniformsLib","original":{"line":40,"column":33},"generated":{"line":1,"column":347}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":40,"column":44},"generated":{"line":1,"column":349}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"common","original":{"line":40,"column":45},"generated":{"line":1,"column":361}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"UniformsLib","original":{"line":40,"column":53},"generated":{"line":1,"column":368}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":40,"column":64},"generated":{"line":1,"column":370}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"fog","original":{"line":40,"column":65},"generated":{"line":1,"column":382}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"UniformsLib","original":{"line":40,"column":70},"generated":{"line":1,"column":386}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":40,"column":81},"generated":{"line":1,"column":388}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"line","original":{"line":40,"column":82},"generated":{"line":1,"column":400}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"vertexShader","original":{"line":41,"column":2},"generated":{"line":1,"column":407}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":43,"column":2},"generated":{"line":1,"column":420}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"fragmentShader","original":{"line":272,"column":2},"generated":{"line":1,"column":6305}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":274,"column":2},"generated":{"line":1,"column":6320}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":436,"column":0},"generated":{"line":1,"column":9937}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"LineMaterial","original":{"line":436,"column":6},"generated":{"line":1,"column":9943}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"ShaderMaterial","original":{"line":436,"column":27},"generated":{"line":1,"column":9953}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":436,"column":41},"generated":{"line":1,"column":9955}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"constructor","original":{"line":437,"column":2},"generated":{"line":1,"column":9970}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"parameters","original":{"line":437,"column":14},"generated":{"line":1,"column":9982}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":438,"column":4},"generated":{"line":1,"column":9985}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":438,"column":10},"generated":{"line":1,"column":9991}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"type","original":{"line":439,"column":6},"generated":{"line":1,"column":9992}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":439,"column":12},"generated":{"line":1,"column":9997}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":440,"column":6},"generated":{"line":1,"column":10012}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"UniformsUtils","original":{"line":440,"column":16},"generated":{"line":1,"column":10021}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":440,"column":29},"generated":{"line":1,"column":10023}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"clone","original":{"line":440,"column":30},"generated":{"line":1,"column":10037}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"ShaderLib","original":{"line":440,"column":36},"generated":{"line":1,"column":10043}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":440,"column":45},"generated":{"line":1,"column":10045}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":440,"column":52},"generated":{"line":1,"column":10055}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":440,"column":54},"generated":{"line":1,"column":10060}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"vertexShader","original":{"line":441,"column":6},"generated":{"line":1,"column":10070}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"ShaderLib","original":{"line":441,"column":20},"generated":{"line":1,"column":10083}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":441,"column":29},"generated":{"line":1,"column":10085}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":441,"column":36},"generated":{"line":1,"column":10095}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"vertexShader","original":{"line":441,"column":38},"generated":{"line":1,"column":10100}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"fragmentShader","original":{"line":442,"column":6},"generated":{"line":1,"column":10113}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"ShaderLib","original":{"line":442,"column":22},"generated":{"line":1,"column":10128}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":442,"column":31},"generated":{"line":1,"column":10130}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":442,"column":38},"generated":{"line":1,"column":10140}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"fragmentShader","original":{"line":442,"column":40},"generated":{"line":1,"column":10145}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"clipping","original":{"line":443,"column":6},"generated":{"line":1,"column":10160}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":443,"column":16},"generated":{"line":1,"column":10170}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":446,"column":4},"generated":{"line":1,"column":10174}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"isLineMaterial","original":{"line":446,"column":9},"generated":{"line":1,"column":10179}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":446,"column":26},"generated":{"line":1,"column":10195}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Object","original":{"line":447,"column":4},"generated":{"line":1,"column":10197}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defineProperties","original":{"line":447,"column":11},"generated":{"line":1,"column":10204}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":447,"column":28},"generated":{"line":1,"column":10221}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":447,"column":34},"generated":{"line":1,"column":10226}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"color","original":{"line":448,"column":6},"generated":{"line":1,"column":10227}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":448,"column":13},"generated":{"line":1,"column":10233}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":449,"column":8},"generated":{"line":1,"column":10234}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":449,"column":20},"generated":{"line":1,"column":10246}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":450,"column":8},"generated":{"line":1,"column":10248}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":450,"column":13},"generated":{"line":1,"column":10252}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":451,"column":10},"generated":{"line":1,"column":10263}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":451,"column":17},"generated":{"line":1,"column":10270}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":451,"column":22},"generated":{"line":1,"column":10275}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"diffuse","original":{"line":451,"column":31},"generated":{"line":1,"column":10284}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":451,"column":39},"generated":{"line":1,"column":10292}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":453,"column":8},"generated":{"line":1,"column":10299}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":453,"column":13},"generated":{"line":1,"column":10303}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":453,"column":23},"generated":{"line":1,"column":10312}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":454,"column":10},"generated":{"line":1,"column":10315}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":454,"column":15},"generated":{"line":1,"column":10320}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"diffuse","original":{"line":454,"column":24},"generated":{"line":1,"column":10329}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":454,"column":32},"generated":{"line":1,"column":10337}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":454,"column":40},"generated":{"line":1,"column":10343}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"worldUnits","original":{"line":457,"column":6},"generated":{"line":1,"column":10347}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":457,"column":18},"generated":{"line":1,"column":10358}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":458,"column":8},"generated":{"line":1,"column":10359}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":458,"column":20},"generated":{"line":1,"column":10371}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":459,"column":8},"generated":{"line":1,"column":10373}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":459,"column":13},"generated":{"line":1,"column":10377}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":460,"column":10},"generated":{"line":1,"column":10388}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":460,"column":17},"generated":{"line":1,"column":10394}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":460,"column":34},"generated":{"line":1,"column":10410}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":460,"column":39},"generated":{"line":1,"column":10415}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":462,"column":8},"generated":{"line":1,"column":10424}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":462,"column":13},"generated":{"line":1,"column":10428}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":462,"column":23},"generated":{"line":1,"column":10437}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":463,"column":24},"generated":{"line":1,"column":10441}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":463,"column":14},"generated":{"line":1,"column":10445}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":464,"column":12},"generated":{"line":1,"column":10447}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":464,"column":17},"generated":{"line":1,"column":10452}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"WORLD_UNITS","original":{"line":464,"column":25},"generated":{"line":1,"column":10460}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":464,"column":39},"generated":{"line":1,"column":10472}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":466,"column":19},"generated":{"line":1,"column":10482}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":466,"column":24},"generated":{"line":1,"column":10487}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"WORLD_UNITS","original":{"line":466,"column":32},"generated":{"line":1,"column":10495}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"linewidth","original":{"line":470,"column":6},"generated":{"line":1,"column":10509}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":470,"column":17},"generated":{"line":1,"column":10519}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":471,"column":8},"generated":{"line":1,"column":10520}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":471,"column":20},"generated":{"line":1,"column":10532}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":472,"column":8},"generated":{"line":1,"column":10534}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":472,"column":13},"generated":{"line":1,"column":10538}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":473,"column":10},"generated":{"line":1,"column":10549}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":473,"column":17},"generated":{"line":1,"column":10556}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":473,"column":22},"generated":{"line":1,"column":10561}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"linewidth","original":{"line":473,"column":31},"generated":{"line":1,"column":10570}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":473,"column":41},"generated":{"line":1,"column":10580}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":475,"column":8},"generated":{"line":1,"column":10587}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":475,"column":13},"generated":{"line":1,"column":10591}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":475,"column":23},"generated":{"line":1,"column":10600}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":476,"column":10},"generated":{"line":1,"column":10603}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":476,"column":15},"generated":{"line":1,"column":10608}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"linewidth","original":{"line":476,"column":24},"generated":{"line":1,"column":10617}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":476,"column":34},"generated":{"line":1,"column":10627}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":476,"column":42},"generated":{"line":1,"column":10633}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashed","original":{"line":479,"column":6},"generated":{"line":1,"column":10637}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":479,"column":14},"generated":{"line":1,"column":10644}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":480,"column":8},"generated":{"line":1,"column":10645}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":480,"column":20},"generated":{"line":1,"column":10657}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":481,"column":8},"generated":{"line":1,"column":10659}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":481,"column":13},"generated":{"line":1,"column":10663}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":482,"column":10},"generated":{"line":1,"column":10674}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Boolean","original":{"line":482,"column":17},"generated":{"line":1,"column":10681}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":482,"column":25},"generated":{"line":1,"column":10689}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":482,"column":39},"generated":{"line":1,"column":10702}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":482,"column":44},"generated":{"line":1,"column":10707}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":485,"column":8},"generated":{"line":1,"column":10717}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":485,"column":12},"generated":{"line":1,"column":10721}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Boolean","original":{"line":486,"column":14},"generated":{"line":1,"column":10724}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":486,"column":22},"generated":{"line":1,"column":10732}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Boolean","original":{"line":486,"column":33},"generated":{"line":1,"column":10737}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":486,"column":41},"generated":{"line":1,"column":10745}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":486,"column":55},"generated":{"line":1,"column":10758}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":486,"column":60},"generated":{"line":1,"column":10763}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":487,"column":12},"generated":{"line":1,"column":10774}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"needsUpdate","original":{"line":487,"column":17},"generated":{"line":1,"column":10779}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":487,"column":31},"generated":{"line":1,"column":10792}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":490,"column":24},"generated":{"line":1,"column":10796}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":490,"column":14},"generated":{"line":1,"column":10800}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":491,"column":12},"generated":{"line":1,"column":10802}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":491,"column":17},"generated":{"line":1,"column":10807}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"USE_DASH","original":{"line":491,"column":25},"generated":{"line":1,"column":10815}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":491,"column":36},"generated":{"line":1,"column":10824}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":493,"column":19},"generated":{"line":1,"column":10834}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":493,"column":24},"generated":{"line":1,"column":10839}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"USE_DASH","original":{"line":493,"column":32},"generated":{"line":1,"column":10847}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashScale","original":{"line":498,"column":6},"generated":{"line":1,"column":10858}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":498,"column":17},"generated":{"line":1,"column":10868}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":499,"column":8},"generated":{"line":1,"column":10869}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":499,"column":20},"generated":{"line":1,"column":10881}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":500,"column":8},"generated":{"line":1,"column":10883}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":500,"column":13},"generated":{"line":1,"column":10887}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":501,"column":10},"generated":{"line":1,"column":10898}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":501,"column":17},"generated":{"line":1,"column":10905}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":501,"column":22},"generated":{"line":1,"column":10910}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashScale","original":{"line":501,"column":31},"generated":{"line":1,"column":10919}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":501,"column":41},"generated":{"line":1,"column":10929}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":503,"column":8},"generated":{"line":1,"column":10936}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":503,"column":13},"generated":{"line":1,"column":10940}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":503,"column":23},"generated":{"line":1,"column":10949}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":504,"column":10},"generated":{"line":1,"column":10952}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":504,"column":15},"generated":{"line":1,"column":10957}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashScale","original":{"line":504,"column":24},"generated":{"line":1,"column":10966}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":504,"column":34},"generated":{"line":1,"column":10976}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":504,"column":42},"generated":{"line":1,"column":10982}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashSize","original":{"line":507,"column":6},"generated":{"line":1,"column":10986}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":507,"column":16},"generated":{"line":1,"column":10995}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":508,"column":8},"generated":{"line":1,"column":10996}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":508,"column":20},"generated":{"line":1,"column":11008}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":509,"column":8},"generated":{"line":1,"column":11010}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":509,"column":13},"generated":{"line":1,"column":11014}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":510,"column":10},"generated":{"line":1,"column":11025}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":510,"column":17},"generated":{"line":1,"column":11032}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":510,"column":22},"generated":{"line":1,"column":11037}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashSize","original":{"line":510,"column":31},"generated":{"line":1,"column":11046}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":510,"column":40},"generated":{"line":1,"column":11055}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":512,"column":8},"generated":{"line":1,"column":11062}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":512,"column":13},"generated":{"line":1,"column":11066}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":512,"column":23},"generated":{"line":1,"column":11075}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":513,"column":10},"generated":{"line":1,"column":11078}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":513,"column":15},"generated":{"line":1,"column":11083}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashSize","original":{"line":513,"column":24},"generated":{"line":1,"column":11092}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":513,"column":33},"generated":{"line":1,"column":11101}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":513,"column":41},"generated":{"line":1,"column":11107}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashOffset","original":{"line":516,"column":6},"generated":{"line":1,"column":11111}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":516,"column":18},"generated":{"line":1,"column":11122}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":517,"column":8},"generated":{"line":1,"column":11123}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":517,"column":20},"generated":{"line":1,"column":11135}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":518,"column":8},"generated":{"line":1,"column":11137}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":518,"column":13},"generated":{"line":1,"column":11141}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":519,"column":10},"generated":{"line":1,"column":11152}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":519,"column":17},"generated":{"line":1,"column":11159}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":519,"column":22},"generated":{"line":1,"column":11164}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashOffset","original":{"line":519,"column":31},"generated":{"line":1,"column":11173}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":519,"column":42},"generated":{"line":1,"column":11184}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":521,"column":8},"generated":{"line":1,"column":11191}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":521,"column":13},"generated":{"line":1,"column":11195}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":521,"column":23},"generated":{"line":1,"column":11204}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":522,"column":10},"generated":{"line":1,"column":11207}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":522,"column":15},"generated":{"line":1,"column":11212}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"dashOffset","original":{"line":522,"column":24},"generated":{"line":1,"column":11221}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":522,"column":35},"generated":{"line":1,"column":11232}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":522,"column":43},"generated":{"line":1,"column":11238}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"gapSize","original":{"line":525,"column":6},"generated":{"line":1,"column":11242}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":525,"column":15},"generated":{"line":1,"column":11250}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":526,"column":8},"generated":{"line":1,"column":11251}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":526,"column":20},"generated":{"line":1,"column":11263}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":527,"column":8},"generated":{"line":1,"column":11265}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":527,"column":13},"generated":{"line":1,"column":11269}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":528,"column":10},"generated":{"line":1,"column":11280}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":528,"column":17},"generated":{"line":1,"column":11287}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":528,"column":22},"generated":{"line":1,"column":11292}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"gapSize","original":{"line":528,"column":31},"generated":{"line":1,"column":11301}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":528,"column":39},"generated":{"line":1,"column":11309}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":530,"column":8},"generated":{"line":1,"column":11316}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":530,"column":13},"generated":{"line":1,"column":11320}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":530,"column":23},"generated":{"line":1,"column":11329}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":531,"column":10},"generated":{"line":1,"column":11332}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":531,"column":15},"generated":{"line":1,"column":11337}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"gapSize","original":{"line":531,"column":24},"generated":{"line":1,"column":11346}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":531,"column":32},"generated":{"line":1,"column":11354}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":531,"column":40},"generated":{"line":1,"column":11360}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"opacity","original":{"line":534,"column":6},"generated":{"line":1,"column":11364}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":534,"column":15},"generated":{"line":1,"column":11372}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":535,"column":8},"generated":{"line":1,"column":11373}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":535,"column":20},"generated":{"line":1,"column":11385}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":536,"column":8},"generated":{"line":1,"column":11387}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":536,"column":13},"generated":{"line":1,"column":11391}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":537,"column":10},"generated":{"line":1,"column":11402}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":537,"column":17},"generated":{"line":1,"column":11409}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":537,"column":22},"generated":{"line":1,"column":11414}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"opacity","original":{"line":537,"column":31},"generated":{"line":1,"column":11423}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":537,"column":39},"generated":{"line":1,"column":11431}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":539,"column":8},"generated":{"line":1,"column":11438}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":539,"column":13},"generated":{"line":1,"column":11442}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":539,"column":23},"generated":{"line":1,"column":11451}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":540,"column":10},"generated":{"line":1,"column":11454}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":540,"column":15},"generated":{"line":1,"column":11459}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"opacity","original":{"line":540,"column":24},"generated":{"line":1,"column":11468}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":540,"column":32},"generated":{"line":1,"column":11476}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":540,"column":40},"generated":{"line":1,"column":11482}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"resolution","original":{"line":543,"column":6},"generated":{"line":1,"column":11486}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":543,"column":18},"generated":{"line":1,"column":11497}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":544,"column":8},"generated":{"line":1,"column":11498}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":544,"column":20},"generated":{"line":1,"column":11510}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":545,"column":8},"generated":{"line":1,"column":11512}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":545,"column":13},"generated":{"line":1,"column":11516}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":546,"column":10},"generated":{"line":1,"column":11527}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":546,"column":17},"generated":{"line":1,"column":11534}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":546,"column":22},"generated":{"line":1,"column":11539}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"resolution","original":{"line":546,"column":31},"generated":{"line":1,"column":11548}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":546,"column":42},"generated":{"line":1,"column":11559}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":548,"column":8},"generated":{"line":1,"column":11566}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":548,"column":13},"generated":{"line":1,"column":11570}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":548,"column":23},"generated":{"line":1,"column":11579}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":549,"column":10},"generated":{"line":1,"column":11582}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"uniforms","original":{"line":549,"column":15},"generated":{"line":1,"column":11587}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"resolution","original":{"line":549,"column":24},"generated":{"line":1,"column":11596}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":549,"column":35},"generated":{"line":1,"column":11607}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"copy","original":{"line":549,"column":41},"generated":{"line":1,"column":11613}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":549,"column":46},"generated":{"line":1,"column":11618}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"alphaToCoverage","original":{"line":552,"column":6},"generated":{"line":1,"column":11623}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":552,"column":23},"generated":{"line":1,"column":11639}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"enumerable","original":{"line":553,"column":8},"generated":{"line":1,"column":11640}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":553,"column":20},"generated":{"line":1,"column":11652}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"get","original":{"line":554,"column":8},"generated":{"line":1,"column":11654}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":554,"column":13},"generated":{"line":1,"column":11658}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":555,"column":10},"generated":{"line":1,"column":11669}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Boolean","original":{"line":555,"column":17},"generated":{"line":1,"column":11676}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":555,"column":25},"generated":{"line":1,"column":11684}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":555,"column":52},"generated":{"line":1,"column":11710}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":555,"column":57},"generated":{"line":1,"column":11715}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"set","original":{"line":557,"column":8},"generated":{"line":1,"column":11725}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":557,"column":13},"generated":{"line":1,"column":11729}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":557,"column":23},"generated":{"line":1,"column":11738}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Boolean","original":{"line":558,"column":14},"generated":{"line":1,"column":11741}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":558,"column":22},"generated":{"line":1,"column":11749}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"Boolean","original":{"line":558,"column":33},"generated":{"line":1,"column":11754}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":558,"column":41},"generated":{"line":1,"column":11762}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":558,"column":68},"generated":{"line":1,"column":11788}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":558,"column":73},"generated":{"line":1,"column":11793}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":559,"column":12},"generated":{"line":1,"column":11804}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"needsUpdate","original":{"line":559,"column":17},"generated":{"line":1,"column":11809}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":559,"column":31},"generated":{"line":1,"column":11822}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":562,"column":24},"generated":{"line":1,"column":11826}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"value","original":{"line":562,"column":14},"generated":{"line":1,"column":11830}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":563,"column":12},"generated":{"line":1,"column":11833}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":563,"column":17},"generated":{"line":1,"column":11838}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"USE_ALPHA_TO_COVERAGE","original":{"line":563,"column":25},"generated":{"line":1,"column":11846}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":563,"column":49},"generated":{"line":1,"column":11868}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":564,"column":12},"generated":{"line":1,"column":11871}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"extensions","original":{"line":564,"column":17},"generated":{"line":1,"column":11876}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"derivatives","original":{"line":564,"column":28},"generated":{"line":1,"column":11887}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":564,"column":42},"generated":{"line":1,"column":11900}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":566,"column":19},"generated":{"line":1,"column":11911}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"defines","original":{"line":566,"column":24},"generated":{"line":1,"column":11916}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"USE_ALPHA_TO_COVERAGE","original":{"line":566,"column":32},"generated":{"line":1,"column":11924}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":567,"column":12},"generated":{"line":1,"column":11946}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"extensions","original":{"line":567,"column":17},"generated":{"line":1,"column":11951}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"derivatives","original":{"line":567,"column":28},"generated":{"line":1,"column":11962}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":567,"column":42},"generated":{"line":1,"column":11975}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","original":{"line":572,"column":4},"generated":{"line":1,"column":11982}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"setValues","original":{"line":572,"column":9},"generated":{"line":1,"column":11987}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"parameters","original":{"line":572,"column":19},"generated":{"line":1,"column":11997}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"exports","original":{"line":575,"column":1},"generated":{"line":1,"column":12001}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"LineMaterial","original":{"line":575,"column":1},"generated":{"line":1,"column":12009}},{"source":"node_modules/three-stdlib/lines/LineMaterial.js","name":"LineMaterial","original":{"line":575,"column":1},"generated":{"line":1,"column":12022}}],"sources":{"node_modules/three-stdlib/lines/LineMaterial.js":"import { UniformsLib, Vector2, ShaderLib, UniformsUtils, ShaderMaterial } from 'three';\n\n/**\n * parameters = {\n *  color: <hex>,\n *  linewidth: <float>,\n *  dashed: <boolean>,\n *  dashScale: <float>,\n *  dashSize: <float>,\n *  dashOffset: <float>,\n *  gapSize: <float>,\n *  resolution: <Vector2>, // to be set by renderer\n * }\n */\nUniformsLib.line = {\n  worldUnits: {\n    value: 1\n  },\n  linewidth: {\n    value: 1\n  },\n  resolution: {\n    value: new Vector2(1, 1)\n  },\n  dashOffset: {\n    value: 0\n  },\n  dashScale: {\n    value: 1\n  },\n  dashSize: {\n    value: 1\n  },\n  gapSize: {\n    value: 1\n  } // todo FIX - maybe change to totalSize\n\n};\nShaderLib['line'] = {\n  uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.fog, UniformsLib.line]),\n  vertexShader:\n  /* glsl */\n  `\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tworldStart = start.xyz;\n\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t#else\n\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 offset;\n\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t}\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t#endif\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t// set the world position\n\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tfloat alpha = opacity;\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\nclass LineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      type: 'LineMaterial',\n      uniforms: UniformsUtils.clone(ShaderLib['line'].uniforms),\n      vertexShader: ShaderLib['line'].vertexShader,\n      fragmentShader: ShaderLib['line'].fragmentShader,\n      clipping: true // required for clipping support\n\n    });\n    this.isLineMaterial = true;\n    Object.defineProperties(this, {\n      color: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.diffuse.value;\n        },\n        set: function (value) {\n          this.uniforms.diffuse.value = value;\n        }\n      },\n      worldUnits: {\n        enumerable: true,\n        get: function () {\n          return 'WORLD_UNITS' in this.defines;\n        },\n        set: function (value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = '';\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.linewidth.value;\n        },\n        set: function (value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function () {\n          return Boolean('USE_DASH' in this.defines);\n        },\n\n        set(value) {\n          if (Boolean(value) !== Boolean('USE_DASH' in this.defines)) {\n            this.needsUpdate = true;\n          }\n\n          if (value === true) {\n            this.defines.USE_DASH = '';\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n\n      },\n      dashScale: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashScale.value;\n        },\n        set: function (value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashSize.value;\n        },\n        set: function (value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function (value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.gapSize.value;\n        },\n        set: function (value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function () {\n          return Boolean('USE_ALPHA_TO_COVERAGE' in this.defines);\n        },\n        set: function (value) {\n          if (Boolean(value) !== Boolean('USE_ALPHA_TO_COVERAGE' in this.defines)) {\n            this.needsUpdate = true;\n          }\n\n          if (value === true) {\n            this.defines.USE_ALPHA_TO_COVERAGE = '';\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.USE_ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n\n}\n\nexport { LineMaterial };\n"},"lineCount":null}},"error":null,"hash":"f747cf648deb1f1ff851a5efb0f16a4b","cacheData":{"env":{}}}