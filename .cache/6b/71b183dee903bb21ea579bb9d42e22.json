{"id":"jg0T","dependencies":[{"name":"/home/moh/Desktop/MYPortfolio/package.json","includedInParent":true,"mtime":1725356897845},{"name":"/home/moh/Desktop/MYPortfolio/node_modules/three-stdlib/package.json","includedInParent":true,"mtime":1724625312988}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.BleachBypassShader=void 0;const e=exports.BleachBypassShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"\\tvUv = uv;\",\"\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"\\tvec4 base = texture2D( tDiffuse, vUv );\",\"\\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\"\\tfloat lum = dot( lumCoeff, base.rgb );\",\"\\tvec3 blend = vec3( lum );\",\"\\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\"\\tvec3 result1 = 2.0 * base.rgb * blend;\",\"\\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\"\\tvec3 newColor = mix( result1, result2, L );\",\"\\tfloat A2 = opacity * base.a;\",\"\\tvec3 mixRGB = A2 * newColor.rgb;\",\"\\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\"\\tgl_FragColor = vec4( mixRGB, base.a );\",\"}\"].join(\"\\n\")};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":0}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":13}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":20}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":35}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":43}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":56}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":57}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":64}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":68}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":76}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":17,"column":1},"generated":{"line":1,"column":100}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":6,"column":0},"generated":{"line":1,"column":102}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"BleachBypassShader","original":{"line":6,"column":6},"generated":{"line":1,"column":108}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"exports","original":{"line":6,"column":24},"generated":{"line":1,"column":110}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"BleachBypassShader","original":{"line":6,"column":24},"generated":{"line":1,"column":118}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":6,"column":27},"generated":{"line":1,"column":137}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"uniforms","original":{"line":7,"column":2},"generated":{"line":1,"column":138}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":7,"column":12},"generated":{"line":1,"column":147}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"tDiffuse","original":{"line":8,"column":4},"generated":{"line":1,"column":148}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":8,"column":14},"generated":{"line":1,"column":157}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"value","original":{"line":9,"column":6},"generated":{"line":1,"column":158}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":9,"column":13},"generated":{"line":1,"column":164}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"opacity","original":{"line":11,"column":4},"generated":{"line":1,"column":170}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":11,"column":13},"generated":{"line":1,"column":178}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"value","original":{"line":12,"column":6},"generated":{"line":1,"column":179}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":12,"column":13},"generated":{"line":1,"column":185}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"vertexShader","original":{"line":15,"column":2},"generated":{"line":1,"column":189}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":16},"generated":{"line":1,"column":202}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":17},"generated":{"line":1,"column":203}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":38},"generated":{"line":1,"column":223}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":55},"generated":{"line":1,"column":239}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":69},"generated":{"line":1,"column":253}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":147},"generated":{"line":1,"column":331}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"join","original":{"line":15,"column":152},"generated":{"line":1,"column":336}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":15,"column":157},"generated":{"line":1,"column":341}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"fragmentShader","original":{"line":16,"column":2},"generated":{"line":1,"column":347}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":18},"generated":{"line":1,"column":362}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":19},"generated":{"line":1,"column":363}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":45},"generated":{"line":1,"column":388}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":76},"generated":{"line":1,"column":418}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":97},"generated":{"line":1,"column":438}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":114},"generated":{"line":1,"column":454}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":158},"generated":{"line":1,"column":498}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":203},"generated":{"line":1,"column":543}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":246},"generated":{"line":1,"column":586}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":276},"generated":{"line":1,"column":616}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":337},"generated":{"line":1,"column":677}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":380},"generated":{"line":1,"column":720}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":449},"generated":{"line":1,"column":789}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":497},"generated":{"line":1,"column":837}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":530},"generated":{"line":1,"column":870}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":567},"generated":{"line":1,"column":907}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":610},"generated":{"line":1,"column":950}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":653},"generated":{"line":1,"column":993}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","name":"join","original":{"line":16,"column":658},"generated":{"line":1,"column":998}},{"source":"node_modules/three-stdlib/shaders/BleachBypassShader.js","original":{"line":16,"column":663},"generated":{"line":1,"column":1003}}],"sources":{"node_modules/three-stdlib/shaders/BleachBypassShader.js":"/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n * - based on Nvidia example\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n */\nconst BleachBypassShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    opacity: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float opacity;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 base = texture2D( tDiffuse, vUv );', '\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );', '\tfloat lum = dot( lumCoeff, base.rgb );', '\tvec3 blend = vec3( lum );', '\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );', '\tvec3 result1 = 2.0 * base.rgb * blend;', '\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );', '\tvec3 newColor = mix( result1, result2, L );', '\tfloat A2 = opacity * base.a;', '\tvec3 mixRGB = A2 * newColor.rgb;', '\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );', '\tgl_FragColor = vec4( mixRGB, base.a );', '}'].join('\\n')\n};\n\nexport { BleachBypassShader };\n"},"lineCount":null}},"error":null,"hash":"55fd233f6da56eec00728706d4a92f92","cacheData":{"env":{}}}